
Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ac  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004688  08004688  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001088  20000010  080046a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001098  080046a0  00021098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113a1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290e  00000000  00000000  000313d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00033ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00034ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012942  00000000  00000000  00035bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011741  00000000  00000000  00048512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074e25  00000000  00000000  00059c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cea78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  000ceac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004554 	.word	0x08004554

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004554 	.word	0x08004554

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <vApplicationGetIdleTaskMemory+0x28>)
 80004b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000080 	.word	0x20000080

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b096      	sub	sp, #88	; 0x58
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fab9 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f88b 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f925 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8f3 	bl	80006d4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Task1, osPriorityNormal, 0, 128);
 80004ee:	213c      	movs	r1, #60	; 0x3c
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	4a20      	ldr	r2, [pc, #128]	; (8000574 <main+0x9c>)
 80004f4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004f6:	c331      	stmia	r3!, {r0, r4, r5}
 80004f8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004fa:	c331      	stmia	r3!, {r0, r4, r5}
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2100      	movs	r1, #0
 8000504:	0018      	movs	r0, r3
 8000506:	f002 ff76 	bl	80033f6 <osThreadCreate>
 800050a:	0002      	movs	r2, r0
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <main+0xa0>)
 800050e:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task2, osPriorityIdle, 0, 128);
 8000510:	2120      	movs	r1, #32
 8000512:	187b      	adds	r3, r7, r1
 8000514:	4a19      	ldr	r2, [pc, #100]	; (800057c <main+0xa4>)
 8000516:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000518:	c331      	stmia	r3!, {r0, r4, r5}
 800051a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800051c:	c331      	stmia	r3!, {r0, r4, r5}
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2100      	movs	r1, #0
 8000526:	0018      	movs	r0, r3
 8000528:	f002 ff65 	bl	80033f6 <osThreadCreate>
 800052c:	0002      	movs	r2, r0
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <main+0xa8>)
 8000530:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Task3, osPriorityIdle, 0, 128);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <main+0xac>)
 8000536:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000538:	c313      	stmia	r3!, {r0, r1, r4}
 800053a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800053c:	c313      	stmia	r3!, {r0, r1, r4}
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	601a      	str	r2, [r3, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2100      	movs	r1, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f002 ff55 	bl	80033f6 <osThreadCreate>
 800054c:	0002      	movs	r2, r0
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0xb0>)
 8000550:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
 osKernelStart();
 8000552:	f002 ff48 	bl	80033e6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_Task1();
 8000556:	f000 f819 	bl	800058c <send_Task1>
	  HAL_Delay(1000);
 800055a:	23fa      	movs	r3, #250	; 0xfa
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fab4 	bl	8000acc <HAL_Delay>
	  send_Task2();
 8000564:	f000 f82e 	bl	80005c4 <send_Task2>
	  HAL_Delay(1000);
 8000568:	23fa      	movs	r3, #250	; 0xfa
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 faad 	bl	8000acc <HAL_Delay>
	  send_Task1();
 8000572:	e7f0      	b.n	8000556 <main+0x7e>
 8000574:	08004590 	.word	0x08004590
 8000578:	20000304 	.word	0x20000304
 800057c:	080045ac 	.word	0x080045ac
 8000580:	20000308 	.word	0x20000308
 8000584:	080045c8 	.word	0x080045c8
 8000588:	2000030c 	.word	0x2000030c

0800058c <send_Task1>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void send_Task1(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello From Task1\r\n";
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <send_Task1+0x30>)
 8000596:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000598:	c313      	stmia	r3!, {r0, r1, r4}
 800059a:	6811      	ldr	r1, [r2, #0]
 800059c:	6019      	str	r1, [r3, #0]
 800059e:	8891      	ldrh	r1, [r2, #4]
 80005a0:	8099      	strh	r1, [r3, #4]
 80005a2:	7992      	ldrb	r2, [r2, #6]
 80005a4:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <send_Task1+0x34>)
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	2213      	movs	r2, #19
 80005ae:	f001 fead 	bl	800230c <HAL_UART_Transmit>
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b007      	add	sp, #28
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	080045e4 	.word	0x080045e4
 80005c0:	20000280 	.word	0x20000280

080005c4 <send_Task2>:
void send_Task2(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello From Task2\r\n";
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <send_Task2+0x30>)
 80005ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005d0:	c313      	stmia	r3!, {r0, r1, r4}
 80005d2:	6811      	ldr	r1, [r2, #0]
 80005d4:	6019      	str	r1, [r3, #0]
 80005d6:	8891      	ldrh	r1, [r2, #4]
 80005d8:	8099      	strh	r1, [r3, #4]
 80005da:	7992      	ldrb	r2, [r2, #6]
 80005dc:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 80005de:	1d39      	adds	r1, r7, #4
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <send_Task2+0x34>)
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	2213      	movs	r2, #19
 80005e6:	f001 fe91 	bl	800230c <HAL_UART_Transmit>
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b007      	add	sp, #28
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	080045f8 	.word	0x080045f8
 80005f8:	20000280 	.word	0x20000280

080005fc <SystemClock_Config>:
void SystemClock_Config(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b099      	sub	sp, #100	; 0x64
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	242c      	movs	r4, #44	; 0x2c
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2334      	movs	r3, #52	; 0x34
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f003 ff99 	bl	8004544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	2318      	movs	r3, #24
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f003 ff91 	bl	8004544 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000622:	003b      	movs	r3, r7
 8000624:	0018      	movs	r0, r3
 8000626:	2318      	movs	r3, #24
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f003 ff8a 	bl	8004544 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <SystemClock_Config+0xd4>)
 8000636:	401a      	ands	r2, r3
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xd0>)
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0109      	lsls	r1, r1, #4
 800063e:	430a      	orrs	r2, r1
 8000640:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2210      	movs	r2, #16
 8000648:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	22a0      	movs	r2, #160	; 0xa0
 800065a:	0212      	lsls	r2, r2, #8
 800065c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	187b      	adds	r3, r7, r1
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fd14 	bl	8001094 <HAL_RCC_OscConfig>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000670:	f000 f8e0 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	2118      	movs	r1, #24
 8000676:	187b      	adds	r3, r7, r1
 8000678:	220f      	movs	r2, #15
 800067a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2100      	movs	r1, #0
 8000698:	0018      	movs	r0, r3
 800069a:	f001 f877 	bl	800178c <HAL_RCC_ClockConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a2:	f000 f8c7 	bl	8000834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	003b      	movs	r3, r7
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fabf 	bl	8001c38 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006be:	f000 f8b9 	bl	8000834 <Error_Handler>
  }
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b019      	add	sp, #100	; 0x64
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40007000 	.word	0x40007000
 80006d0:	ffffe7ff 	.word	0xffffe7ff

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	22e1      	movs	r2, #225	; 0xe1
 80006e2:	0252      	lsls	r2, r2, #9
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fda3 	bl	8002264 <HAL_UART_Init>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f887 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000280 	.word	0x20000280
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	240c      	movs	r4, #12
 800073c:	193b      	adds	r3, r7, r4
 800073e:	0018      	movs	r0, r3
 8000740:	2314      	movs	r3, #20
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f003 fefd 	bl	8004544 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_GPIO_Init+0x98>)
 800074c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_GPIO_Init+0x98>)
 8000750:	2104      	movs	r1, #4
 8000752:	430a      	orrs	r2, r1
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0x98>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	2204      	movs	r2, #4
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0x98>)
 8000764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_GPIO_Init+0x98>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_GPIO_Init+0x98>)
 8000770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_GPIO_Init+0x98>)
 800077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_GPIO_Init+0x98>)
 8000780:	2102      	movs	r1, #2
 8000782:	430a      	orrs	r2, r1
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_GPIO_Init+0x98>)
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	2202      	movs	r2, #2
 800078c:	4013      	ands	r3, r2
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_GPIO_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	2109      	movs	r1, #9
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fc5d 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800079e:	0021      	movs	r1, r4
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2209      	movs	r2, #9
 80007a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2201      	movs	r2, #1
 80007aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <MX_GPIO_Init+0x9c>)
 80007bc:	0019      	movs	r1, r3
 80007be:	0010      	movs	r0, r2
 80007c0:	f000 fadc 	bl	8000d7c <HAL_GPIO_Init>

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b009      	add	sp, #36	; 0x24
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	50000400 	.word	0x50000400

080007d4 <Task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1 */
void Task1(void const * argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    send_Task1();
 80007dc:	f7ff fed6 	bl	800058c <send_Task1>
    osDelay(1000);
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fe53 	bl	8003490 <osDelay>
    send_Task1();
 80007ea:	e7f7      	b.n	80007dc <Task1+0x8>

080007ec <Task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2 */
void Task2(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2 */
  /* Infinite loop */
  for(;;)
  {
	    send_Task2();
 80007f4:	f7ff fee6 	bl	80005c4 <send_Task2>
	    osDelay(1000);
 80007f8:	23fa      	movs	r3, #250	; 0xfa
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 fe47 	bl	8003490 <osDelay>
	    send_Task2();
 8000802:	e7f7      	b.n	80007f4 <Task2+0x8>

08000804 <Task3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3 */
void Task3(void const * argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f002 fe3f 	bl	8003490 <osDelay>
 8000812:	e7fb      	b.n	800080c <Task3+0x8>

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	429a      	cmp	r2, r3
 8000826:	d101      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000828:	f000 f934 	bl	8000a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x34>)
 8000846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_MspInit+0x34>)
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x34>)
 8000852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <HAL_MspInit+0x34>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0549      	lsls	r1, r1, #21
 800085a:	430a      	orrs	r2, r1
 800085c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800085e:	2302      	movs	r3, #2
 8000860:	425b      	negs	r3, r3
 8000862:	2200      	movs	r2, #0
 8000864:	2103      	movs	r1, #3
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f9dc 	bl	8000c24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	240c      	movs	r4, #12
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f003 fe5a 	bl	8004544 <memset>
  if(huart->Instance==USART2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <HAL_UART_MspInit+0x90>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d131      	bne.n	80008fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_UART_MspInit+0x94>)
 800089c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_UART_MspInit+0x94>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	0289      	lsls	r1, r1, #10
 80008a4:	430a      	orrs	r2, r1
 80008a6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x94>)
 80008aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_UART_MspInit+0x94>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	430a      	orrs	r2, r1
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x94>)
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	2201      	movs	r2, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	220c      	movs	r2, #12
 80008c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2202      	movs	r2, #2
 80008cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2203      	movs	r2, #3
 80008d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2204      	movs	r2, #4
 80008de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	187a      	adds	r2, r7, r1
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 fa47 	bl	8000d7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2103      	movs	r1, #3
 80008f2:	201c      	movs	r0, #28
 80008f4:	f000 f996 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f8:	201c      	movs	r0, #28
 80008fa:	f000 f9a8 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b009      	add	sp, #36	; 0x24
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40004400 	.word	0x40004400
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	0019      	movs	r1, r3
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f97c 	bl	8000c24 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800092c:	200f      	movs	r0, #15
 800092e:	f000 f98e 	bl	8000c4e <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_InitTick+0x98>)
 8000934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_InitTick+0x98>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093e:	2308      	movs	r3, #8
 8000940:	18fa      	adds	r2, r7, r3
 8000942:	230c      	movs	r3, #12
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f001 f943 	bl	8001bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094e:	f001 f915 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8000952:	0003      	movs	r3, r0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	4914      	ldr	r1, [pc, #80]	; (80009ac <HAL_InitTick+0x9c>)
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fbd4 	bl	8000108 <__udivsi3>
 8000960:	0003      	movs	r3, r0
 8000962:	3b01      	subs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0xa0>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	05d2      	lsls	r2, r2, #23
 800096c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_InitTick+0xa0>)
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_InitTick+0xa4>)
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_InitTick+0xa0>)
 8000976:	6a3a      	ldr	r2, [r7, #32]
 8000978:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_InitTick+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_InitTick+0xa0>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_InitTick+0xa0>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fa7b 	bl	8001e84 <HAL_TIM_Base_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d105      	bne.n	800099e <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_InitTick+0xa0>)
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fabd 	bl	8001f14 <HAL_TIM_Base_Start_IT>
 800099a:	0003      	movs	r3, r0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x90>
  }

  /* Return function status */
  return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b00a      	add	sp, #40	; 0x28
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	000f4240 	.word	0x000f4240
 80009b0:	20000310 	.word	0x20000310
 80009b4:	000003e7 	.word	0x000003e7

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <TIM2_IRQHandler+0x14>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 faee 	bl	8001fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000310 	.word	0x20000310

080009dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <USART2_IRQHandler+0x14>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fd3a 	bl	800245c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000280 	.word	0x20000280

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a2a:	f7ff ffe3 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f003 fd65 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd51 	bl	80004d8 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
   ldr   r0, =_estack
 8000a38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a44:	08004690 	.word	0x08004690
  ldr r2, =_sbss
 8000a48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a4c:	20001098 	.word	0x20001098

08000a50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_COMP_IRQHandler>
	...

08000a54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x3c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Init+0x3c>)
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f7ff ff4f 	bl	8000910 <HAL_InitTick>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7e:	f7ff fedf 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000350 	.word	0x20000350

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <HAL_GetTick+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000350 	.word	0x20000350

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff0 	bl	8000ab8 <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	001a      	movs	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	f7ff ffe0 	bl	8000ab8 <HAL_GetTick>
 8000af8:	0002      	movs	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b004      	add	sp, #16
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000008 	.word	0x20000008

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b7f      	cmp	r3, #127	; 0x7f
 8000b26:	d809      	bhi.n	8000b3c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	231f      	movs	r3, #31
 8000b30:	401a      	ands	r2, r3
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_EnableIRQ+0x30>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	4091      	lsls	r1, r2
 8000b38:	000a      	movs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
  }
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5c:	d828      	bhi.n	8000bb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <__NVIC_SetPriority+0xd4>)
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	33c0      	adds	r3, #192	; 0xc0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	589b      	ldr	r3, [r3, r2]
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	0011      	movs	r1, r2
 8000b74:	2203      	movs	r2, #3
 8000b76:	400a      	ands	r2, r1
 8000b78:	00d2      	lsls	r2, r2, #3
 8000b7a:	21ff      	movs	r1, #255	; 0xff
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	401a      	ands	r2, r3
 8000b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	019b      	lsls	r3, r3, #6
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	2303      	movs	r3, #3
 8000b96:	4003      	ands	r3, r0
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	481f      	ldr	r0, [pc, #124]	; (8000c1c <__NVIC_SetPriority+0xd4>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	33c0      	adds	r3, #192	; 0xc0
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bae:	e031      	b.n	8000c14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <__NVIC_SetPriority+0xd8>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	230f      	movs	r3, #15
 8000bba:	400b      	ands	r3, r1
 8000bbc:	3b08      	subs	r3, #8
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3306      	adds	r3, #6
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	; 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	001c      	movs	r4, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	4023      	ands	r3, r4
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	3306      	adds	r3, #6
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	18c3      	adds	r3, r0, r3
 8000c10:	3304      	adds	r3, #4
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b003      	add	sp, #12
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	210f      	movs	r1, #15
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	1c02      	adds	r2, r0, #0
 8000c34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ff81 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	0002      	movs	r2, r0
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ff57 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c76:	230f      	movs	r3, #15
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2225      	movs	r2, #37	; 0x25
 8000c82:	5c9b      	ldrb	r3, [r3, r2]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d008      	beq.n	8000c9c <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2224      	movs	r2, #36	; 0x24
 8000c94:	2100      	movs	r1, #0
 8000c96:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e024      	b.n	8000ce6 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	210e      	movs	r1, #14
 8000ca8:	438a      	bics	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	438a      	bics	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	221c      	movs	r2, #28
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	000a      	movs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2225      	movs	r2, #37	; 0x25
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2224      	movs	r2, #36	; 0x24
 8000cdc:	2100      	movs	r1, #0
 8000cde:	5499      	strb	r1, [r3, r2]

    return status;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2225      	movs	r2, #37	; 0x25
 8000d02:	5c9b      	ldrb	r3, [r3, r2]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d006      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e02a      	b.n	8000d6e <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	210e      	movs	r1, #14
 8000d24:	438a      	bics	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2101      	movs	r1, #1
 8000d34:	438a      	bics	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	221c      	movs	r2, #28
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2225      	movs	r2, #37	; 0x25
 8000d50:	2101      	movs	r1, #1
 8000d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2224      	movs	r2, #36	; 0x24
 8000d58:	2100      	movs	r1, #0
 8000d5a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	4798      	blx	r3
    }
  }
  return status;
 8000d6e:	230f      	movs	r3, #15
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	781b      	ldrb	r3, [r3, #0]
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d92:	e149      	b.n	8001028 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <HAL_GPIO_Init+0x30>
 8000daa:	e13a      	b.n	8001022 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	2201      	movs	r2, #1
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d017      	beq.n	8000e62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d123      	bne.n	8000eb6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	58d3      	ldr	r3, [r2, r3]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2207      	movs	r2, #7
 8000e80:	4013      	ands	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2107      	movs	r1, #7
 8000e9a:	400b      	ands	r3, r1
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	6939      	ldr	r1, [r7, #16]
 8000eb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	029b      	lsls	r3, r3, #10
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0x17c>
 8000ef6:	e094      	b.n	8001022 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	4b51      	ldr	r3, [pc, #324]	; (8001040 <HAL_GPIO_Init+0x2c4>)
 8000efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x2c4>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x2c8>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	589b      	ldr	r3, [r3, r2]
 8000f10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1de>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a44      	ldr	r2, [pc, #272]	; (8001048 <HAL_GPIO_Init+0x2cc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1da>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a43      	ldr	r2, [pc, #268]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1d6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a42      	ldr	r2, [pc, #264]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1d2>
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	2103      	movs	r1, #3
 8000f60:	400a      	ands	r2, r1
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x2c8>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	035b      	lsls	r3, r3, #13
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	039b      	lsls	r3, r3, #14
 8001010:	4013      	ands	r3, r2
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	40da      	lsrs	r2, r3
 8001030:	1e13      	subs	r3, r2, #0
 8001032:	d000      	beq.n	8001036 <HAL_GPIO_Init+0x2ba>
 8001034:	e6ae      	b.n	8000d94 <HAL_GPIO_Init+0x18>
  }
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b006      	add	sp, #24
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	50000400 	.word	0x50000400
 800104c:	50000800 	.word	0x50000800
 8001050:	50001c00 	.word	0x50001c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	0008      	movs	r0, r1
 8001062:	0011      	movs	r1, r2
 8001064:	1cbb      	adds	r3, r7, #2
 8001066:	1c02      	adds	r2, r0, #0
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	1c7b      	adds	r3, r7, #1
 800106c:	1c0a      	adds	r2, r1, #0
 800106e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001070:	1c7b      	adds	r3, r7, #1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001078:	1cbb      	adds	r3, r7, #2
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001082:	1cbb      	adds	r3, r7, #2
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 fb6c 	bl	8001780 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a8:	4bc8      	ldr	r3, [pc, #800]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	220c      	movs	r2, #12
 80010ae:	4013      	ands	r3, r2
 80010b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b2:	4bc6      	ldr	r3, [pc, #792]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d100      	bne.n	80010ca <HAL_RCC_OscConfig+0x36>
 80010c8:	e07d      	b.n	80011c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x68>
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	025b      	lsls	r3, r3, #9
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10d      	bne.n	80010fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4bba      	ldr	r3, [pc, #744]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x5a>
 80010ec:	e06a      	b.n	80011c4 <HAL_RCC_OscConfig+0x130>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d166      	bne.n	80011c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f000 fb42 	bl	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	025b      	lsls	r3, r3, #9
 8001104:	429a      	cmp	r2, r3
 8001106:	d107      	bne.n	8001118 <HAL_RCC_OscConfig+0x84>
 8001108:	4bb0      	ldr	r3, [pc, #704]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4baf      	ldr	r3, [pc, #700]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0249      	lsls	r1, r1, #9
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e027      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	23a0      	movs	r3, #160	; 0xa0
 800111e:	02db      	lsls	r3, r3, #11
 8001120:	429a      	cmp	r2, r3
 8001122:	d10e      	bne.n	8001142 <HAL_RCC_OscConfig+0xae>
 8001124:	4ba9      	ldr	r3, [pc, #676]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	02c9      	lsls	r1, r1, #11
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	4ba6      	ldr	r3, [pc, #664]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4ba5      	ldr	r3, [pc, #660]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0249      	lsls	r1, r1, #9
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e012      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4ba1      	ldr	r3, [pc, #644]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001148:	49a1      	ldr	r1, [pc, #644]	; (80013d0 <HAL_RCC_OscConfig+0x33c>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4b9b      	ldr	r3, [pc, #620]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b9a      	ldr	r3, [pc, #616]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001162:	499c      	ldr	r1, [pc, #624]	; (80013d4 <HAL_RCC_OscConfig+0x340>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d014      	beq.n	800119a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fca2 	bl	8000ab8 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117a:	f7ff fc9d 	bl	8000ab8 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b64      	cmp	r3, #100	; 0x64
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e2f9      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	029b      	lsls	r3, r3, #10
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0xe6>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fc8d 	bl	8000ab8 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fc88 	bl	8000ab8 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e2e4      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x110>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x13e>
 80011d0:	e099      	b.n	8001306 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	2220      	movs	r2, #32
 80011dc:	4013      	ands	r3, r2
 80011de:	d009      	beq.n	80011f4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80011e0:	4b7a      	ldr	r3, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011e6:	2120      	movs	r1, #32
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2220      	movs	r2, #32
 80011f0:	4393      	bics	r3, r2
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	2b0c      	cmp	r3, #12
 80011fe:	d13e      	bne.n	800127e <HAL_RCC_OscConfig+0x1ea>
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d13b      	bne.n	800127e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001206:	4b71      	ldr	r3, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2204      	movs	r2, #4
 800120c:	4013      	ands	r3, r2
 800120e:	d004      	beq.n	800121a <HAL_RCC_OscConfig+0x186>
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e2b2      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a6e      	ldr	r2, [pc, #440]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800122c:	430a      	orrs	r2, r1
 800122e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2209      	movs	r2, #9
 8001236:	4393      	bics	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800123c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001242:	f000 fbeb 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8001246:	0001      	movs	r1, r0
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	220f      	movs	r2, #15
 8001250:	4013      	ands	r3, r2
 8001252:	4a62      	ldr	r2, [pc, #392]	; (80013dc <HAL_RCC_OscConfig+0x348>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	000a      	movs	r2, r1
 8001258:	40da      	lsrs	r2, r3
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <HAL_RCC_OscConfig+0x34c>)
 800125c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_RCC_OscConfig+0x350>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2513      	movs	r5, #19
 8001264:	197c      	adds	r4, r7, r5
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff fb52 	bl	8000910 <HAL_InitTick>
 800126c:	0003      	movs	r3, r0
 800126e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001270:	197b      	adds	r3, r7, r5
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d046      	beq.n	8001306 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001278:	197b      	adds	r3, r7, r5
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	e280      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	2b00      	cmp	r3, #0
 8001282:	d027      	beq.n	80012d4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2209      	movs	r2, #9
 800128a:	4393      	bics	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fc0f 	bl	8000ab8 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc0a 	bl	8000ab8 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e266      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2204      	movs	r2, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	d0f1      	beq.n	80012a0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	021a      	lsls	r2, r3, #8
 80012cc:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e018      	b.n	8001306 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbea 	bl	8000ab8 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fbe5 	bl	8000ab8 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e241      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2204      	movs	r2, #4
 8001302:	4013      	ands	r3, r2
 8001304:	d1f1      	bne.n	80012ea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2210      	movs	r2, #16
 800130c:	4013      	ands	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x27e>
 8001310:	e0a1      	b.n	8001456 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d140      	bne.n	800139a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d005      	beq.n	8001330 <HAL_RCC_OscConfig+0x29c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e227      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_RCC_OscConfig+0x354>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	0a19      	lsrs	r1, r3, #8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	061a      	lsls	r2, r3, #24
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	0b5b      	lsrs	r3, r3, #13
 800135e:	3301      	adds	r3, #1
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0212      	lsls	r2, r2, #8
 8001364:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	210f      	movs	r1, #15
 800136e:	400b      	ands	r3, r1
 8001370:	491a      	ldr	r1, [pc, #104]	; (80013dc <HAL_RCC_OscConfig+0x348>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x34c>)
 8001378:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_RCC_OscConfig+0x350>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2513      	movs	r5, #19
 8001380:	197c      	adds	r4, r7, r5
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fac4 	bl	8000910 <HAL_InitTick>
 8001388:	0003      	movs	r3, r0
 800138a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800138c:	197b      	adds	r3, r7, r5
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d060      	beq.n	8001456 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001394:	197b      	adds	r3, r7, r5
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	e1f2      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03f      	beq.n	8001422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0049      	lsls	r1, r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb82 	bl	8000ab8 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013b8:	e018      	b.n	80013ec <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fb7d 	bl	8000ab8 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d911      	bls.n	80013ec <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1d9      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	fffeffff 	.word	0xfffeffff
 80013d4:	fffbffff 	.word	0xfffbffff
 80013d8:	ffffe0ff 	.word	0xffffe0ff
 80013dc:	08004614 	.word	0x08004614
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004
 80013e8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ec:	4bc9      	ldr	r3, [pc, #804]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0e0      	beq.n	80013ba <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f8:	4bc6      	ldr	r3, [pc, #792]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4ac6      	ldr	r2, [pc, #792]	; (8001718 <HAL_RCC_OscConfig+0x684>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4bc3      	ldr	r3, [pc, #780]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140c:	4bc1      	ldr	r3, [pc, #772]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	0a19      	lsrs	r1, r3, #8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	061a      	lsls	r2, r3, #24
 800141a:	4bbe      	ldr	r3, [pc, #760]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	e019      	b.n	8001456 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001422:	4bbc      	ldr	r3, [pc, #752]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4bbb      	ldr	r3, [pc, #748]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001428:	49bc      	ldr	r1, [pc, #752]	; (800171c <HAL_RCC_OscConfig+0x688>)
 800142a:	400a      	ands	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fb43 	bl	8000ab8 <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001438:	f7ff fb3e 	bl	8000ab8 <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e19a      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800144a:	4bb2      	ldr	r3, [pc, #712]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4013      	ands	r3, r2
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2208      	movs	r2, #8
 800145c:	4013      	ands	r3, r2
 800145e:	d036      	beq.n	80014ce <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d019      	beq.n	800149c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4baa      	ldr	r3, [pc, #680]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800146a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146c:	4ba9      	ldr	r3, [pc, #676]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fb20 	bl	8000ab8 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fb1b 	bl	8000ab8 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e177      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001490:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d0f1      	beq.n	800147e <HAL_RCC_OscConfig+0x3ea>
 800149a:	e018      	b.n	80014ce <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800149e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a0:	4b9c      	ldr	r3, [pc, #624]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	438a      	bics	r2, r1
 80014a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fb06 	bl	8000ab8 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb01 	bl	8000ab8 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e15d      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c4:	4b93      	ldr	r3, [pc, #588]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f1      	bne.n	80014b2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x446>
 80014d8:	e0ae      	b.n	8001638 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2023      	movs	r0, #35	; 0x23
 80014dc:	183b      	adds	r3, r7, r0
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e2:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	055b      	lsls	r3, r3, #21
 80014ea:	4013      	ands	r3, r2
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b89      	ldr	r3, [pc, #548]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0549      	lsls	r1, r1, #21
 80014f8:	430a      	orrs	r2, r1
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80014fc:	183b      	adds	r3, r7, r0
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b87      	ldr	r3, [pc, #540]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d11a      	bne.n	8001544 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150e:	4b84      	ldr	r3, [pc, #528]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b83      	ldr	r3, [pc, #524]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	0049      	lsls	r1, r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151c:	f7ff facc 	bl	8000ab8 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff fac7 	bl	8000ab8 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e123      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4b79      	ldr	r3, [pc, #484]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x4cc>
 8001550:	4b70      	ldr	r3, [pc, #448]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001554:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0049      	lsls	r1, r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	651a      	str	r2, [r3, #80]	; 0x50
 800155e:	e031      	b.n	80015c4 <HAL_RCC_OscConfig+0x530>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0x4ee>
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800156a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800156c:	4b69      	ldr	r3, [pc, #420]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800156e:	496b      	ldr	r1, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x688>)
 8001570:	400a      	ands	r2, r1
 8001572:	651a      	str	r2, [r3, #80]	; 0x50
 8001574:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800157a:	496a      	ldr	r1, [pc, #424]	; (8001724 <HAL_RCC_OscConfig+0x690>)
 800157c:	400a      	ands	r2, r1
 800157e:	651a      	str	r2, [r3, #80]	; 0x50
 8001580:	e020      	b.n	80015c4 <HAL_RCC_OscConfig+0x530>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	23a0      	movs	r3, #160	; 0xa0
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	429a      	cmp	r2, r3
 800158c:	d10e      	bne.n	80015ac <HAL_RCC_OscConfig+0x518>
 800158e:	4b61      	ldr	r3, [pc, #388]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	00c9      	lsls	r1, r1, #3
 8001598:	430a      	orrs	r2, r1
 800159a:	651a      	str	r2, [r3, #80]	; 0x50
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800159e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a0:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0049      	lsls	r1, r1, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	651a      	str	r2, [r3, #80]	; 0x50
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x530>
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015b2:	495a      	ldr	r1, [pc, #360]	; (800171c <HAL_RCC_OscConfig+0x688>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	651a      	str	r2, [r3, #80]	; 0x50
 80015b8:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015be:	4959      	ldr	r1, [pc, #356]	; (8001724 <HAL_RCC_OscConfig+0x690>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d015      	beq.n	80015f8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa74 	bl	8000ab8 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff fa6f 	bl	8000ab8 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a51      	ldr	r2, [pc, #324]	; (8001728 <HAL_RCC_OscConfig+0x694>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0ca      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0ef      	beq.n	80015d6 <HAL_RCC_OscConfig+0x542>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff fa5e 	bl	8000ab8 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001600:	e009      	b.n	8001616 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fa59 	bl	8000ab8 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	4a46      	ldr	r2, [pc, #280]	; (8001728 <HAL_RCC_OscConfig+0x694>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0b4      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d1ef      	bne.n	8001602 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001622:	2323      	movs	r3, #35	; 0x23
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800162e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001632:	493e      	ldr	r1, [pc, #248]	; (800172c <HAL_RCC_OscConfig+0x698>)
 8001634:	400a      	ands	r2, r1
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2b00      	cmp	r3, #0
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x5ae>
 8001640:	e09d      	b.n	800177e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x5b6>
 8001648:	e076      	b.n	8001738 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b02      	cmp	r3, #2
 8001650:	d145      	bne.n	80016de <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_RCC_OscConfig+0x69c>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fa2b 	bl	8000ab8 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fa26 	bl	8000ab8 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e082      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	049b      	lsls	r3, r3, #18
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x6a0>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	431a      	orrs	r2, r3
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0449      	lsls	r1, r1, #17
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa00 	bl	8000ab8 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff f9fb 	bl	8000ab8 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	049b      	lsls	r3, r3, #18
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x62a>
 80016dc:	e04f      	b.n	800177e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016e4:	4912      	ldr	r1, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x69c>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff f9e5 	bl	8000ab8 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff f9e0 	bl	8000ab8 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e03c      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001706:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	049b      	lsls	r3, r3, #18
 800170e:	4013      	ands	r3, r2
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x660>
 8001712:	e034      	b.n	800177e <HAL_RCC_OscConfig+0x6ea>
 8001714:	40021000 	.word	0x40021000
 8001718:	ffff1fff 	.word	0xffff1fff
 800171c:	fffffeff 	.word	0xfffffeff
 8001720:	40007000 	.word	0x40007000
 8001724:	fffffbff 	.word	0xfffffbff
 8001728:	00001388 	.word	0x00001388
 800172c:	efffffff 	.word	0xefffffff
 8001730:	feffffff 	.word	0xfeffffff
 8001734:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x6f4>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	429a      	cmp	r2, r3
 8001758:	d10f      	bne.n	800177a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	23f0      	movs	r3, #240	; 0xf0
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	401a      	ands	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d107      	bne.n	800177a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	23c0      	movs	r3, #192	; 0xc0
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b00a      	add	sp, #40	; 0x28
 8001786:	bdb0      	pop	{r4, r5, r7, pc}
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e128      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b96      	ldr	r3, [pc, #600]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4013      	ands	r3, r2
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d91e      	bls.n	80017ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	4b90      	ldr	r3, [pc, #576]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017c0:	f7ff f97a 	bl	8000ab8 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c8:	e009      	b.n	80017de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f975 	bl	8000ab8 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a8a      	ldr	r2, [pc, #552]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e109      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b87      	ldr	r3, [pc, #540]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f6:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	22f0      	movs	r2, #240	; 0xf0
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_ClockConfig+0x8a>
 8001814:	e089      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800181e:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	029b      	lsls	r3, r3, #10
 8001826:	4013      	ands	r3, r2
 8001828:	d120      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0e1      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	049b      	lsls	r3, r3, #18
 800183e:	4013      	ands	r3, r2
 8001840:	d114      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0d5      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d106      	bne.n	800185c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d109      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0ca      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0c2      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186c:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2203      	movs	r2, #3
 8001872:	4393      	bics	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff f91a 	bl	8000ab8 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001890:	e009      	b.n	80018a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f7ff f911 	bl	8000ab8 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0a5      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	220c      	movs	r2, #12
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d1ef      	bne.n	8001892 <HAL_RCC_ClockConfig+0x106>
 80018b2:	e03a      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d111      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018be:	f7ff f8fb 	bl	8000ab8 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e08f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	220c      	movs	r2, #12
 80018d8:	4013      	ands	r3, r2
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d1ef      	bne.n	80018be <HAL_RCC_ClockConfig+0x132>
 80018de:	e024      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11b      	bne.n	8001920 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e8:	e009      	b.n	80018fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ea:	f7ff f8e5 	bl	8000ab8 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e079      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	220c      	movs	r2, #12
 8001904:	4013      	ands	r3, r2
 8001906:	2b04      	cmp	r3, #4
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_ClockConfig+0x15e>
 800190a:	e00e      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f8d4 	bl	8000ab8 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e068      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	220c      	movs	r2, #12
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d21e      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800194a:	f7ff f8b5 	bl	8000ab8 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	e009      	b.n	8001968 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f8b0 	bl	8000ab8 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e044      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2204      	movs	r2, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x27c>)
 8001986:	4013      	ands	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001990:	430a      	orrs	r2, r1
 8001992:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2208      	movs	r2, #8
 800199a:	4013      	ands	r3, r2
 800199c:	d00a      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_RCC_ClockConfig+0x280>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00da      	lsls	r2, r3, #3
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b4:	f000 f832 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019b8:	0001      	movs	r1, r0
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	220f      	movs	r2, #15
 80019c2:	4013      	ands	r3, r2
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_RCC_ClockConfig+0x284>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	000a      	movs	r2, r1
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_ClockConfig+0x288>)
 80019ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_ClockConfig+0x28c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	250b      	movs	r5, #11
 80019d6:	197c      	adds	r4, r7, r5
 80019d8:	0018      	movs	r0, r3
 80019da:	f7fe ff99 	bl	8000910 <HAL_InitTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019e2:	197b      	adds	r3, r7, r5
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019ea:	197b      	adds	r3, r7, r5
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40022000 	.word	0x40022000
 8001a00:	00001388 	.word	0x00001388
 8001a04:	40021000 	.word	0x40021000
 8001a08:	fffff8ff 	.word	0xfffff8ff
 8001a0c:	ffffc7ff 	.word	0xffffc7ff
 8001a10:	08004614 	.word	0x08004614
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d014      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a32:	d900      	bls.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a34:	e07b      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x112>
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x24>
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3e:	e076      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a40:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2210      	movs	r2, #16
 8001a46:	4013      	ands	r3, r2
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a4e:	e07c      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x140>)
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a54:	e079      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5a:	e076      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	0c9a      	lsrs	r2, r3, #18
 8001a60:	230f      	movs	r3, #15
 8001a62:	401a      	ands	r2, r3
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	0d9a      	lsrs	r2, r3, #22
 8001a6e:	2303      	movs	r3, #3
 8001a70:	4013      	ands	r3, r2
 8001a72:	3301      	adds	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d01a      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	4a35      	ldr	r2, [pc, #212]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	69b8      	ldr	r0, [r7, #24]
 8001a90:	69f9      	ldr	r1, [r7, #28]
 8001a92:	f7fe fbe5 	bl	8000260 <__aeabi_lmul>
 8001a96:	0002      	movs	r2, r0
 8001a98:	000b      	movs	r3, r1
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f7fe fbb9 	bl	8000220 <__aeabi_uldivmod>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	000b      	movs	r3, r1
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab6:	e037      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d01a      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	68b8      	ldr	r0, [r7, #8]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	f7fe fbc5 	bl	8000260 <__aeabi_lmul>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	000b      	movs	r3, r1
 8001ada:	0010      	movs	r0, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f7fe fb99 	bl	8000220 <__aeabi_uldivmod>
 8001aee:	0002      	movs	r2, r0
 8001af0:	000b      	movs	r3, r1
 8001af2:	0013      	movs	r3, r2
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
 8001af6:	e017      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	0018      	movs	r0, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	0019      	movs	r1, r3
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b02:	2300      	movs	r3, #0
 8001b04:	f7fe fbac 	bl	8000260 <__aeabi_lmul>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	000b      	movs	r3, r1
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	001c      	movs	r4, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	001d      	movs	r5, r3
 8001b18:	0022      	movs	r2, r4
 8001b1a:	002b      	movs	r3, r5
 8001b1c:	f7fe fb80 	bl	8000220 <__aeabi_uldivmod>
 8001b20:	0002      	movs	r2, r0
 8001b22:	000b      	movs	r3, r1
 8001b24:	0013      	movs	r3, r2
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b2c:	e00d      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	2207      	movs	r2, #7
 8001b36:	4013      	ands	r3, r2
 8001b38:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	0212      	lsls	r2, r2, #8
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b48:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b00e      	add	sp, #56	; 0x38
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	003d0900 	.word	0x003d0900
 8001b5c:	00f42400 	.word	0x00f42400
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	0800462c 	.word	0x0800462c

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b80:	f7ff fff2 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b84:	0001      	movs	r1, r0
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	40d9      	lsrs	r1, r3
 8001b96:	000b      	movs	r3, r1
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08004624 	.word	0x08004624

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bac:	f7ff ffdc 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0adb      	lsrs	r3, r3, #11
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	000b      	movs	r3, r1
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004624 	.word	0x08004624

08001bd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	220f      	movs	r2, #15
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_GetClockConfig+0x5c>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2203      	movs	r2, #3
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	22f0      	movs	r2, #240	; 0xf0
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	23e0      	movs	r3, #224	; 0xe0
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	401a      	ands	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	23e0      	movs	r3, #224	; 0xe0
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	401a      	ands	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c40:	2017      	movs	r0, #23
 8001c42:	183b      	adds	r3, r7, r0
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d100      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001c52:	e0c2      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c54:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c64:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0549      	lsls	r1, r1, #21
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c6e:	183b      	adds	r3, r7, r0
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d11a      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c80:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0049      	lsls	r1, r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ff13 	bl	8000ab8 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	e008      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7fe ff0e 	bl	8000ab8 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0d4      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	039b      	lsls	r3, r3, #14
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	039b      	lsls	r3, r3, #14
 8001cca:	4013      	ands	r3, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d013      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	23c0      	movs	r3, #192	; 0xc0
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	401a      	ands	r2, r3
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	029b      	lsls	r3, r3, #10
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10a      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ce4:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	029b      	lsls	r3, r3, #10
 8001cec:	401a      	ands	r2, r3
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	029b      	lsls	r3, r3, #10
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0ac      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	029b      	lsls	r3, r3, #10
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d03b      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	23c0      	movs	r3, #192	; 0xc0
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	4013      	ands	r3, r2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d033      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2220      	movs	r2, #32
 8001d22:	4013      	ands	r3, r2
 8001d24:	d02e      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d26:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2a:	4a4e      	ldr	r2, [pc, #312]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	0309      	lsls	r1, r1, #12
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d44:	4948      	ldr	r1, [pc, #288]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	d014      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fead 	bl	8000ab8 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d62:	e009      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe fea8 	bl	8000ab8 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e06d      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	029b      	lsls	r3, r3, #10
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001d96:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a35      	ldr	r2, [pc, #212]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	039b      	lsls	r3, r3, #14
 8001da8:	401a      	ands	r2, r3
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001db2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc4:	2317      	movs	r3, #23
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dd4:	4927      	ldr	r1, [pc, #156]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	220c      	movs	r2, #12
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b006      	add	sp, #24
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	fffcffff 	.word	0xfffcffff
 8001e68:	fff7ffff 	.word	0xfff7ffff
 8001e6c:	00001388 	.word	0x00001388
 8001e70:	ffcfffff 	.word	0xffcfffff
 8001e74:	efffffff 	.word	0xefffffff
 8001e78:	fffff3ff 	.word	0xfffff3ff
 8001e7c:	ffffcfff 	.word	0xffffcfff
 8001e80:	fff3ffff 	.word	0xfff3ffff

08001e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e032      	b.n	8001efc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2239      	movs	r2, #57	; 0x39
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2238      	movs	r2, #56	; 0x38
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 f829 	bl	8001f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2239      	movs	r2, #57	; 0x39
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	0010      	movs	r0, r2
 8001ec6:	f000 f979 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	223e      	movs	r2, #62	; 0x3e
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	223a      	movs	r2, #58	; 0x3a
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	223b      	movs	r2, #59	; 0x3b
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	223c      	movs	r2, #60	; 0x3c
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223d      	movs	r2, #61	; 0x3d
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2239      	movs	r2, #57	; 0x39
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2239      	movs	r2, #57	; 0x39
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d001      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e036      	b.n	8001f9a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2239      	movs	r2, #57	; 0x39
 8001f30:	2102      	movs	r1, #2
 8001f32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2101      	movs	r1, #1
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	05db      	lsls	r3, r3, #23
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d009      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0x50>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_TIM_Base_Start_IT+0x90>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0x50>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_TIM_Base_Start_IT+0x94>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d111      	bne.n	8001f88 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d010      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f86:	e007      	b.n	8001f98 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	40011400 	.word	0x40011400

08001fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d124      	bne.n	800200c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d11d      	bne.n	800200c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	4252      	negs	r2, r2
 8001fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f8cc 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e007      	b.n	8002006 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f8bf 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f8cb 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2204      	movs	r2, #4
 8002014:	4013      	ands	r3, r2
 8002016:	2b04      	cmp	r3, #4
 8002018:	d125      	bne.n	8002066 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11e      	bne.n	8002066 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2205      	movs	r2, #5
 800202e:	4252      	negs	r2, r2
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	23c0      	movs	r3, #192	; 0xc0
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 f89f 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 800204e:	e007      	b.n	8002060 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0018      	movs	r0, r3
 8002054:	f000 f892 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 f89e 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2208      	movs	r2, #8
 800206e:	4013      	ands	r3, r2
 8002070:	2b08      	cmp	r3, #8
 8002072:	d124      	bne.n	80020be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2208      	movs	r2, #8
 800207c:	4013      	ands	r3, r2
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11d      	bne.n	80020be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2209      	movs	r2, #9
 8002088:	4252      	negs	r2, r2
 800208a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2204      	movs	r2, #4
 8002090:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2203      	movs	r2, #3
 800209a:	4013      	ands	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 f873 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 80020a6:	e007      	b.n	80020b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f866 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 f872 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2210      	movs	r2, #16
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d125      	bne.n	8002118 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2210      	movs	r2, #16
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d11e      	bne.n	8002118 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2211      	movs	r2, #17
 80020e0:	4252      	negs	r2, r2
 80020e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2208      	movs	r2, #8
 80020e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	23c0      	movs	r3, #192	; 0xc0
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d004      	beq.n	8002102 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 f846 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8002100:	e007      	b.n	8002112 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f839 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 f845 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2201      	movs	r2, #1
 8002120:	4013      	ands	r3, r2
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10f      	bne.n	8002146 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	2b01      	cmp	r3, #1
 8002132:	d108      	bne.n	8002146 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2202      	movs	r2, #2
 800213a:	4252      	negs	r2, r2
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7fe fb67 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	4013      	ands	r3, r2
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d10f      	bne.n	8002174 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	4013      	ands	r3, r2
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d108      	bne.n	8002174 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2241      	movs	r2, #65	; 0x41
 8002168:	4252      	negs	r2, r2
 800216a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f000 f81c 	bl	80021ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	05db      	lsls	r3, r3, #23
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0x2a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <TIM_Base_SetConfig+0x9c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0x2a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1e      	ldr	r2, [pc, #120]	; (800225c <TIM_Base_SetConfig+0xa0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2270      	movs	r2, #112	; 0x70
 80021ea:	4393      	bics	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	05db      	lsls	r3, r3, #23
 80021fe:	429a      	cmp	r2, r3
 8002200:	d007      	beq.n	8002212 <TIM_Base_SetConfig+0x56>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <TIM_Base_SetConfig+0x9c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <TIM_Base_SetConfig+0x56>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a13      	ldr	r2, [pc, #76]	; (800225c <TIM_Base_SetConfig+0xa0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d108      	bne.n	8002224 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <TIM_Base_SetConfig+0xa4>)
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	4393      	bics	r3, r2
 800222a:	001a      	movs	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	615a      	str	r2, [r3, #20]
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40010800 	.word	0x40010800
 800225c:	40011400 	.word	0x40011400
 8002260:	fffffcff 	.word	0xfffffcff

08002264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e044      	b.n	8002300 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2274      	movs	r2, #116	; 0x74
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f7fe faf5 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2224      	movs	r2, #36	; 0x24
 8002292:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2101      	movs	r1, #1
 80022a0:	438a      	bics	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 fbce 	bl	8002a48 <UART_SetConfig>
 80022ac:	0003      	movs	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e024      	b.n	8002300 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fe0b 	bl	8002edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	490d      	ldr	r1, [pc, #52]	; (8002308 <HAL_UART_Init+0xa4>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	212a      	movs	r1, #42	; 0x2a
 80022e2:	438a      	bics	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 fea3 	bl	8003044 <UART_CheckIdleState>
 80022fe:	0003      	movs	r3, r0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ffffb7ff 	.word	0xffffb7ff

0800230c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002320:	2b20      	cmp	r3, #32
 8002322:	d000      	beq.n	8002326 <HAL_UART_Transmit+0x1a>
 8002324:	e095      	b.n	8002452 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_UART_Transmit+0x28>
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e08d      	b.n	8002454 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	429a      	cmp	r2, r3
 8002342:	d109      	bne.n	8002358 <HAL_UART_Transmit+0x4c>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d001      	beq.n	8002358 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e07d      	b.n	8002454 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2274      	movs	r2, #116	; 0x74
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit+0x5a>
 8002362:	2302      	movs	r3, #2
 8002364:	e076      	b.n	8002454 <HAL_UART_Transmit+0x148>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2274      	movs	r2, #116	; 0x74
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	2100      	movs	r1, #0
 8002374:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800237c:	f7fe fb9c 	bl	8000ab8 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1dba      	adds	r2, r7, #6
 8002388:	2150      	movs	r1, #80	; 0x50
 800238a:	8812      	ldrh	r2, [r2, #0]
 800238c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1dba      	adds	r2, r7, #6
 8002392:	2152      	movs	r1, #82	; 0x52
 8002394:	8812      	ldrh	r2, [r2, #0]
 8002396:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d108      	bne.n	80023b6 <HAL_UART_Transmit+0xaa>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e003      	b.n	80023be <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2274      	movs	r2, #116	; 0x74
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80023c6:	e02c      	b.n	8002422 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	0013      	movs	r3, r2
 80023d2:	2200      	movs	r2, #0
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	f000 fe7d 	bl	80030d4 <UART_WaitOnFlagUntilTimeout>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e038      	b.n	8002454 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	001a      	movs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	05d2      	lsls	r2, r2, #23
 80023f4:	0dd2      	lsrs	r2, r2, #23
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	3302      	adds	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e007      	b.n	8002410 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2252      	movs	r2, #82	; 0x52
 8002414:	5a9b      	ldrh	r3, [r3, r2]
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b299      	uxth	r1, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2252      	movs	r2, #82	; 0x52
 8002420:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2252      	movs	r2, #82	; 0x52
 8002426:	5a9b      	ldrh	r3, [r3, r2]
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1cc      	bne.n	80023c8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	0013      	movs	r3, r2
 8002438:	2200      	movs	r2, #0
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	f000 fe4a 	bl	80030d4 <UART_WaitOnFlagUntilTimeout>
 8002440:	1e03      	subs	r3, r0, #0
 8002442:	d001      	beq.n	8002448 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e005      	b.n	8002454 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
  }
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b008      	add	sp, #32
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b0ab      	sub	sp, #172	; 0xac
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	22a4      	movs	r2, #164	; 0xa4
 800246c:	18b9      	adds	r1, r7, r2
 800246e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	20a0      	movs	r0, #160	; 0xa0
 8002478:	1839      	adds	r1, r7, r0
 800247a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	219c      	movs	r1, #156	; 0x9c
 8002484:	1879      	adds	r1, r7, r1
 8002486:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002488:	0011      	movs	r1, r2
 800248a:	18bb      	adds	r3, r7, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a99      	ldr	r2, [pc, #612]	; (80026f4 <HAL_UART_IRQHandler+0x298>)
 8002490:	4013      	ands	r3, r2
 8002492:	2298      	movs	r2, #152	; 0x98
 8002494:	18bc      	adds	r4, r7, r2
 8002496:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002498:	18bb      	adds	r3, r7, r2
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d114      	bne.n	80024ca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2220      	movs	r2, #32
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00f      	beq.n	80024ca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024aa:	183b      	adds	r3, r7, r0
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2220      	movs	r2, #32
 80024b0:	4013      	ands	r3, r2
 80024b2:	d00a      	beq.n	80024ca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d100      	bne.n	80024be <HAL_UART_IRQHandler+0x62>
 80024bc:	e298      	b.n	80029f0 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	0010      	movs	r0, r2
 80024c6:	4798      	blx	r3
      }
      return;
 80024c8:	e292      	b.n	80029f0 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024ca:	2398      	movs	r3, #152	; 0x98
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d100      	bne.n	80024d6 <HAL_UART_IRQHandler+0x7a>
 80024d4:	e114      	b.n	8002700 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024d6:	239c      	movs	r3, #156	; 0x9c
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024e2:	23a0      	movs	r3, #160	; 0xa0
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a83      	ldr	r2, [pc, #524]	; (80026f8 <HAL_UART_IRQHandler+0x29c>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	d100      	bne.n	80024f0 <HAL_UART_IRQHandler+0x94>
 80024ee:	e107      	b.n	8002700 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024f0:	23a4      	movs	r3, #164	; 0xa4
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d012      	beq.n	8002522 <HAL_UART_IRQHandler+0xc6>
 80024fc:	23a0      	movs	r3, #160	; 0xa0
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4013      	ands	r3, r2
 8002508:	d00b      	beq.n	8002522 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	589b      	ldr	r3, [r3, r2]
 8002518:	2201      	movs	r2, #1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002522:	23a4      	movs	r3, #164	; 0xa4
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d011      	beq.n	8002552 <HAL_UART_IRQHandler+0xf6>
 800252e:	239c      	movs	r3, #156	; 0x9c
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	d00b      	beq.n	8002552 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	589b      	ldr	r3, [r3, r2]
 8002548:	2204      	movs	r2, #4
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002552:	23a4      	movs	r3, #164	; 0xa4
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	d011      	beq.n	8002582 <HAL_UART_IRQHandler+0x126>
 800255e:	239c      	movs	r3, #156	; 0x9c
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d00b      	beq.n	8002582 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2204      	movs	r2, #4
 8002570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	589b      	ldr	r3, [r3, r2]
 8002578:	2202      	movs	r2, #2
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002582:	23a4      	movs	r3, #164	; 0xa4
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2208      	movs	r2, #8
 800258a:	4013      	ands	r3, r2
 800258c:	d017      	beq.n	80025be <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800258e:	23a0      	movs	r3, #160	; 0xa0
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2220      	movs	r2, #32
 8002596:	4013      	ands	r3, r2
 8002598:	d105      	bne.n	80025a6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800259a:	239c      	movs	r3, #156	; 0x9c
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025a4:	d00b      	beq.n	80025be <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2208      	movs	r2, #8
 80025ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	589b      	ldr	r3, [r3, r2]
 80025b4:	2208      	movs	r2, #8
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025be:	23a4      	movs	r3, #164	; 0xa4
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_UART_IRQHandler+0x198>
 80025cc:	23a0      	movs	r3, #160	; 0xa0
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	04db      	lsls	r3, r3, #19
 80025d6:	4013      	ands	r3, r2
 80025d8:	d00c      	beq.n	80025f4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	589b      	ldr	r3, [r3, r2]
 80025ea:	2220      	movs	r2, #32
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	589b      	ldr	r3, [r3, r2]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d100      	bne.n	8002600 <HAL_UART_IRQHandler+0x1a4>
 80025fe:	e1f9      	b.n	80029f4 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002600:	23a4      	movs	r3, #164	; 0xa4
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2220      	movs	r2, #32
 8002608:	4013      	ands	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800260c:	23a0      	movs	r3, #160	; 0xa0
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2220      	movs	r2, #32
 8002614:	4013      	ands	r3, r2
 8002616:	d008      	beq.n	800262a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	0010      	movs	r0, r2
 8002628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	589b      	ldr	r3, [r3, r2]
 8002630:	2194      	movs	r1, #148	; 0x94
 8002632:	187a      	adds	r2, r7, r1
 8002634:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2240      	movs	r2, #64	; 0x40
 800263e:	4013      	ands	r3, r2
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d004      	beq.n	800264e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002644:	187b      	adds	r3, r7, r1
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2228      	movs	r2, #40	; 0x28
 800264a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800264c:	d047      	beq.n	80026de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fe03 	bl	800325c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2240      	movs	r2, #64	; 0x40
 800265e:	4013      	ands	r3, r2
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d137      	bne.n	80026d4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002664:	f3ef 8310 	mrs	r3, PRIMASK
 8002668:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800266a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266c:	2090      	movs	r0, #144	; 0x90
 800266e:	183a      	adds	r2, r7, r0
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2140      	movs	r1, #64	; 0x40
 800268a:	438a      	bics	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	183b      	adds	r3, r7, r0
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002696:	f383 8810 	msr	PRIMASK, r3
}
 800269a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d012      	beq.n	80026ca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <HAL_UART_IRQHandler+0x2a0>)
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7fe fb1c 	bl	8000cee <HAL_DMA_Abort_IT>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d01a      	beq.n	80026f0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	0018      	movs	r0, r3
 80026c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c8:	e012      	b.n	80026f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f9a7 	bl	8002a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d2:	e00d      	b.n	80026f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f9a2 	bl	8002a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e008      	b.n	80026f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f99d 	bl	8002a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	2100      	movs	r1, #0
 80026ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026ee:	e181      	b.n	80029f4 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	46c0      	nop			; (mov r8, r8)
    return;
 80026f2:	e17f      	b.n	80029f4 <HAL_UART_IRQHandler+0x598>
 80026f4:	0000080f 	.word	0x0000080f
 80026f8:	04000120 	.word	0x04000120
 80026fc:	08003321 	.word	0x08003321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	2b01      	cmp	r3, #1
 8002706:	d000      	beq.n	800270a <HAL_UART_IRQHandler+0x2ae>
 8002708:	e133      	b.n	8002972 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800270a:	23a4      	movs	r3, #164	; 0xa4
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2210      	movs	r2, #16
 8002712:	4013      	ands	r3, r2
 8002714:	d100      	bne.n	8002718 <HAL_UART_IRQHandler+0x2bc>
 8002716:	e12c      	b.n	8002972 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002718:	23a0      	movs	r3, #160	; 0xa0
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_UART_IRQHandler+0x2ca>
 8002724:	e125      	b.n	8002972 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2210      	movs	r2, #16
 800272c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	4013      	ands	r3, r2
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d000      	beq.n	800273e <HAL_UART_IRQHandler+0x2e2>
 800273c:	e09d      	b.n	800287a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	217e      	movs	r1, #126	; 0x7e
 8002748:	187b      	adds	r3, r7, r1
 800274a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800274c:	187b      	adds	r3, r7, r1
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d100      	bne.n	8002756 <HAL_UART_IRQHandler+0x2fa>
 8002754:	e150      	b.n	80029f8 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2258      	movs	r2, #88	; 0x58
 800275a:	5a9b      	ldrh	r3, [r3, r2]
 800275c:	187a      	adds	r2, r7, r1
 800275e:	8812      	ldrh	r2, [r2, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d300      	bcc.n	8002766 <HAL_UART_IRQHandler+0x30a>
 8002764:	e148      	b.n	80029f8 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	187a      	adds	r2, r7, r1
 800276a:	215a      	movs	r1, #90	; 0x5a
 800276c:	8812      	ldrh	r2, [r2, #0]
 800276e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d16e      	bne.n	800285c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277e:	f3ef 8310 	mrs	r3, PRIMASK
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002786:	67bb      	str	r3, [r7, #120]	; 0x78
 8002788:	2301      	movs	r3, #1
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	f383 8810 	msr	PRIMASK, r3
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	499a      	ldr	r1, [pc, #616]	; (8002a08 <HAL_UART_IRQHandler+0x5ac>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	f383 8810 	msr	PRIMASK, r3
}
 80027ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b0:	f3ef 8310 	mrs	r3, PRIMASK
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b8:	677b      	str	r3, [r7, #116]	; 0x74
 80027ba:	2301      	movs	r3, #1
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c0:	f383 8810 	msr	PRIMASK, r3
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	438a      	bics	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027dc:	f383 8810 	msr	PRIMASK, r3
}
 80027e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e2:	f3ef 8310 	mrs	r3, PRIMASK
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80027e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ea:	673b      	str	r3, [r7, #112]	; 0x70
 80027ec:	2301      	movs	r3, #1
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f2:	f383 8810 	msr	PRIMASK, r3
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	438a      	bics	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800280e:	f383 8810 	msr	PRIMASK, r3
}
 8002812:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002820:	f3ef 8310 	mrs	r3, PRIMASK
 8002824:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800282a:	2301      	movs	r3, #1
 800282c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2110      	movs	r1, #16
 8002842:	438a      	bics	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	f383 8810 	msr	PRIMASK, r3
}
 8002850:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	0018      	movs	r0, r3
 8002858:	f7fe fa09 	bl	8000c6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2258      	movs	r2, #88	; 0x58
 8002860:	5a9a      	ldrh	r2, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	215a      	movs	r1, #90	; 0x5a
 8002866:	5a5b      	ldrh	r3, [r3, r1]
 8002868:	b29b      	uxth	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f8dc 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002878:	e0be      	b.n	80029f8 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2258      	movs	r2, #88	; 0x58
 800287e:	5a99      	ldrh	r1, [r3, r2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	225a      	movs	r2, #90	; 0x5a
 8002884:	5a9b      	ldrh	r3, [r3, r2]
 8002886:	b29a      	uxth	r2, r3
 8002888:	208e      	movs	r0, #142	; 0x8e
 800288a:	183b      	adds	r3, r7, r0
 800288c:	1a8a      	subs	r2, r1, r2
 800288e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	225a      	movs	r2, #90	; 0x5a
 8002894:	5a9b      	ldrh	r3, [r3, r2]
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d100      	bne.n	800289e <HAL_UART_IRQHandler+0x442>
 800289c:	e0ae      	b.n	80029fc <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <HAL_UART_IRQHandler+0x44c>
 80028a6:	e0a9      	b.n	80029fc <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b0:	2488      	movs	r4, #136	; 0x88
 80028b2:	193a      	adds	r2, r7, r4
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	494f      	ldr	r1, [pc, #316]	; (8002a0c <HAL_UART_IRQHandler+0x5b0>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f383 8810 	msr	PRIMASK, r3
}
 80028de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e0:	f3ef 8310 	mrs	r3, PRIMASK
 80028e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80028e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	2484      	movs	r4, #132	; 0x84
 80028ea:	193a      	adds	r2, r7, r4
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f383 8810 	msr	PRIMASK, r3
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	438a      	bics	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	193b      	adds	r3, r7, r4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292a:	f3ef 8310 	mrs	r3, PRIMASK
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002932:	2480      	movs	r4, #128	; 0x80
 8002934:	193a      	adds	r2, r7, r4
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2110      	movs	r1, #16
 8002950:	438a      	bics	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	193b      	adds	r3, r7, r4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	f383 8810 	msr	PRIMASK, r3
}
 8002960:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002962:	183b      	adds	r3, r7, r0
 8002964:	881a      	ldrh	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f860 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002970:	e044      	b.n	80029fc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002972:	23a4      	movs	r3, #164	; 0xa4
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	035b      	lsls	r3, r3, #13
 800297c:	4013      	ands	r3, r2
 800297e:	d010      	beq.n	80029a2 <HAL_UART_IRQHandler+0x546>
 8002980:	239c      	movs	r3, #156	; 0x9c
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	03db      	lsls	r3, r3, #15
 800298a:	4013      	ands	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	0352      	lsls	r2, r2, #13
 8002996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fd02 	bl	80033a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029a0:	e02f      	b.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029a2:	23a4      	movs	r3, #164	; 0xa4
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	4013      	ands	r3, r2
 80029ac:	d00f      	beq.n	80029ce <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029ae:	23a0      	movs	r3, #160	; 0xa0
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01e      	beq.n	8002a00 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	0010      	movs	r0, r2
 80029ca:	4798      	blx	r3
    }
    return;
 80029cc:	e018      	b.n	8002a00 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029ce:	23a4      	movs	r3, #164	; 0xa4
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	4013      	ands	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
 80029da:	23a0      	movs	r3, #160	; 0xa0
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	4013      	ands	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fcb0 	bl	800334e <UART_EndTransmit_IT>
    return;
 80029ee:	e008      	b.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
      return;
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	e006      	b.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
    return;
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	e004      	b.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
      return;
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	e002      	b.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
      return;
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	e000      	b.n	8002a02 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002a00:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b02b      	add	sp, #172	; 0xac
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	fffffeff 	.word	0xfffffeff
 8002a0c:	fffffedf 	.word	0xfffffedf

08002a10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	000a      	movs	r2, r1
 8002a3a:	1cbb      	adds	r3, r7, #2
 8002a3c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a50:	231a      	movs	r3, #26
 8002a52:	2218      	movs	r2, #24
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	19db      	adds	r3, r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4ab4      	ldr	r2, [pc, #720]	; (8002d4c <UART_SetConfig+0x304>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4aaf      	ldr	r2, [pc, #700]	; (8002d50 <UART_SetConfig+0x308>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4aa9      	ldr	r2, [pc, #676]	; (8002d54 <UART_SetConfig+0x30c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4aa5      	ldr	r2, [pc, #660]	; (8002d58 <UART_SetConfig+0x310>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4aa1      	ldr	r2, [pc, #644]	; (8002d5c <UART_SetConfig+0x314>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d131      	bne.n	8002b40 <UART_SetConfig+0xf8>
 8002adc:	4ba0      	ldr	r3, [pc, #640]	; (8002d60 <UART_SetConfig+0x318>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d01d      	beq.n	8002b24 <UART_SetConfig+0xdc>
 8002ae8:	d823      	bhi.n	8002b32 <UART_SetConfig+0xea>
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d00c      	beq.n	8002b08 <UART_SetConfig+0xc0>
 8002aee:	d820      	bhi.n	8002b32 <UART_SetConfig+0xea>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <UART_SetConfig+0xb2>
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d00e      	beq.n	8002b16 <UART_SetConfig+0xce>
 8002af8:	e01b      	b.n	8002b32 <UART_SetConfig+0xea>
 8002afa:	231b      	movs	r3, #27
 8002afc:	2218      	movs	r2, #24
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	19db      	adds	r3, r3, r7
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e065      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b08:	231b      	movs	r3, #27
 8002b0a:	2218      	movs	r2, #24
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e05e      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2218      	movs	r2, #24
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	19db      	adds	r3, r3, r7
 8002b1e:	2204      	movs	r2, #4
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e057      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b24:	231b      	movs	r3, #27
 8002b26:	2218      	movs	r2, #24
 8002b28:	189b      	adds	r3, r3, r2
 8002b2a:	19db      	adds	r3, r3, r7
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e050      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b32:	231b      	movs	r3, #27
 8002b34:	2218      	movs	r2, #24
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e049      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a83      	ldr	r2, [pc, #524]	; (8002d54 <UART_SetConfig+0x30c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d13e      	bne.n	8002bc8 <UART_SetConfig+0x180>
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <UART_SetConfig+0x318>)
 8002b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b4e:	23c0      	movs	r3, #192	; 0xc0
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	22c0      	movs	r2, #192	; 0xc0
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d027      	beq.n	8002bac <UART_SetConfig+0x164>
 8002b5c:	22c0      	movs	r2, #192	; 0xc0
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d82a      	bhi.n	8002bba <UART_SetConfig+0x172>
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d011      	beq.n	8002b90 <UART_SetConfig+0x148>
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d822      	bhi.n	8002bba <UART_SetConfig+0x172>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <UART_SetConfig+0x13a>
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	00d2      	lsls	r2, r2, #3
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00e      	beq.n	8002b9e <UART_SetConfig+0x156>
 8002b80:	e01b      	b.n	8002bba <UART_SetConfig+0x172>
 8002b82:	231b      	movs	r3, #27
 8002b84:	2218      	movs	r2, #24
 8002b86:	189b      	adds	r3, r3, r2
 8002b88:	19db      	adds	r3, r3, r7
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e021      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b90:	231b      	movs	r3, #27
 8002b92:	2218      	movs	r2, #24
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	19db      	adds	r3, r3, r7
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e01a      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2218      	movs	r2, #24
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e013      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002bac:	231b      	movs	r3, #27
 8002bae:	2218      	movs	r2, #24
 8002bb0:	189b      	adds	r3, r3, r2
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e00c      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002bba:	231b      	movs	r3, #27
 8002bbc:	2218      	movs	r2, #24
 8002bbe:	189b      	adds	r3, r3, r2
 8002bc0:	19db      	adds	r3, r3, r7
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e005      	b.n	8002bd4 <UART_SetConfig+0x18c>
 8002bc8:	231b      	movs	r3, #27
 8002bca:	2218      	movs	r2, #24
 8002bcc:	189b      	adds	r3, r3, r2
 8002bce:	19db      	adds	r3, r3, r7
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a5e      	ldr	r2, [pc, #376]	; (8002d54 <UART_SetConfig+0x30c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d000      	beq.n	8002be0 <UART_SetConfig+0x198>
 8002bde:	e084      	b.n	8002cea <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002be0:	231b      	movs	r3, #27
 8002be2:	2218      	movs	r2, #24
 8002be4:	189b      	adds	r3, r3, r2
 8002be6:	19db      	adds	r3, r3, r7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d01d      	beq.n	8002c2a <UART_SetConfig+0x1e2>
 8002bee:	dc20      	bgt.n	8002c32 <UART_SetConfig+0x1ea>
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d015      	beq.n	8002c20 <UART_SetConfig+0x1d8>
 8002bf4:	dc1d      	bgt.n	8002c32 <UART_SetConfig+0x1ea>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <UART_SetConfig+0x1b8>
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d005      	beq.n	8002c0a <UART_SetConfig+0x1c2>
 8002bfe:	e018      	b.n	8002c32 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7fe ffbc 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002c04:	0003      	movs	r3, r0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c08:	e01c      	b.n	8002c44 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <UART_SetConfig+0x318>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	4013      	ands	r3, r2
 8002c12:	d002      	beq.n	8002c1a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <UART_SetConfig+0x31c>)
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c18:	e014      	b.n	8002c44 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002c1a:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <UART_SetConfig+0x320>)
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c1e:	e011      	b.n	8002c44 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c20:	f7fe fefc 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002c24:	0003      	movs	r3, r0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c28:	e00c      	b.n	8002c44 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c30:	e008      	b.n	8002c44 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c36:	231a      	movs	r3, #26
 8002c38:	2218      	movs	r2, #24
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
        break;
 8002c42:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d100      	bne.n	8002c4c <UART_SetConfig+0x204>
 8002c4a:	e130      	b.n	8002eae <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	0013      	movs	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d305      	bcc.n	8002c68 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d906      	bls.n	8002c76 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002c68:	231a      	movs	r3, #26
 8002c6a:	2218      	movs	r2, #24
 8002c6c:	189b      	adds	r3, r3, r2
 8002c6e:	19db      	adds	r3, r3, r7
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e11b      	b.n	8002eae <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	6939      	ldr	r1, [r7, #16]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	000b      	movs	r3, r1
 8002c84:	0e1b      	lsrs	r3, r3, #24
 8002c86:	0010      	movs	r0, r2
 8002c88:	0205      	lsls	r5, r0, #8
 8002c8a:	431d      	orrs	r5, r3
 8002c8c:	000b      	movs	r3, r1
 8002c8e:	021c      	lsls	r4, r3, #8
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68b8      	ldr	r0, [r7, #8]
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	1900      	adds	r0, r0, r4
 8002ca2:	4169      	adcs	r1, r5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f7fd fab5 	bl	8000220 <__aeabi_uldivmod>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	000b      	movs	r3, r1
 8002cba:	0013      	movs	r3, r2
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc0:	23c0      	movs	r3, #192	; 0xc0
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d309      	bcc.n	8002cdc <UART_SetConfig+0x294>
 8002cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	035b      	lsls	r3, r3, #13
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d204      	bcs.n	8002cdc <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e0e8      	b.n	8002eae <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002cdc:	231a      	movs	r3, #26
 8002cde:	2218      	movs	r2, #24
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19db      	adds	r3, r3, r7
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e0e1      	b.n	8002eae <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d000      	beq.n	8002cf8 <UART_SetConfig+0x2b0>
 8002cf6:	e083      	b.n	8002e00 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002cf8:	231b      	movs	r3, #27
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d834      	bhi.n	8002d70 <UART_SetConfig+0x328>
 8002d06:	009a      	lsls	r2, r3, #2
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <UART_SetConfig+0x324>)
 8002d0a:	18d3      	adds	r3, r2, r3
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d10:	f7fe ff34 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002d14:	0003      	movs	r3, r0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d18:	e033      	b.n	8002d82 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d1a:	f7fe ff45 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d22:	e02e      	b.n	8002d82 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <UART_SetConfig+0x318>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d002      	beq.n	8002d34 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <UART_SetConfig+0x31c>)
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d32:	e026      	b.n	8002d82 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <UART_SetConfig+0x320>)
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d38:	e023      	b.n	8002d82 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3a:	f7fe fe6f 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d42:	e01e      	b.n	8002d82 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d4a:	e01a      	b.n	8002d82 <UART_SetConfig+0x33a>
 8002d4c:	efff69f3 	.word	0xefff69f3
 8002d50:	ffffcfff 	.word	0xffffcfff
 8002d54:	40004800 	.word	0x40004800
 8002d58:	fffff4ff 	.word	0xfffff4ff
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40021000 	.word	0x40021000
 8002d64:	003d0900 	.word	0x003d0900
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	08004638 	.word	0x08004638
      default:
        pclk = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d74:	231a      	movs	r3, #26
 8002d76:	2218      	movs	r2, #24
 8002d78:	189b      	adds	r3, r3, r2
 8002d7a:	19db      	adds	r3, r3, r7
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
        break;
 8002d80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d100      	bne.n	8002d8a <UART_SetConfig+0x342>
 8002d88:	e091      	b.n	8002eae <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	005a      	lsls	r2, r3, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	18d2      	adds	r2, r2, r3
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f7fd f9b3 	bl	8000108 <__udivsi3>
 8002da2:	0003      	movs	r3, r0
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	d921      	bls.n	8002df2 <UART_SetConfig+0x3aa>
 8002dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	025b      	lsls	r3, r3, #9
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d21c      	bcs.n	8002df2 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	200e      	movs	r0, #14
 8002dbe:	2418      	movs	r4, #24
 8002dc0:	1903      	adds	r3, r0, r4
 8002dc2:	19db      	adds	r3, r3, r7
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	1903      	adds	r3, r0, r4
 8002dd8:	19db      	adds	r3, r3, r7
 8002dda:	1902      	adds	r2, r0, r4
 8002ddc:	19d2      	adds	r2, r2, r7
 8002dde:	8812      	ldrh	r2, [r2, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	1902      	adds	r2, r0, r4
 8002dea:	19d2      	adds	r2, r2, r7
 8002dec:	8812      	ldrh	r2, [r2, #0]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e05d      	b.n	8002eae <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002df2:	231a      	movs	r3, #26
 8002df4:	2218      	movs	r2, #24
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	19db      	adds	r3, r3, r7
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e056      	b.n	8002eae <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e00:	231b      	movs	r3, #27
 8002e02:	2218      	movs	r2, #24
 8002e04:	189b      	adds	r3, r3, r2
 8002e06:	19db      	adds	r3, r3, r7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d822      	bhi.n	8002e54 <UART_SetConfig+0x40c>
 8002e0e:	009a      	lsls	r2, r3, #2
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <UART_SetConfig+0x484>)
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7fe feb0 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e20:	e021      	b.n	8002e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e22:	f7fe fec1 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002e26:	0003      	movs	r3, r0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e2a:	e01c      	b.n	8002e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <UART_SetConfig+0x488>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2210      	movs	r2, #16
 8002e32:	4013      	ands	r3, r2
 8002e34:	d002      	beq.n	8002e3c <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <UART_SetConfig+0x48c>)
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e3a:	e014      	b.n	8002e66 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002e3c:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <UART_SetConfig+0x490>)
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e40:	e011      	b.n	8002e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e42:	f7fe fdeb 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002e46:	0003      	movs	r3, r0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e4a:	e00c      	b.n	8002e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e52:	e008      	b.n	8002e66 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e58:	231a      	movs	r3, #26
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
        break;
 8002e64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	085a      	lsrs	r2, r3, #1
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	18d2      	adds	r2, r2, r3
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	f7fd f943 	bl	8000108 <__udivsi3>
 8002e82:	0003      	movs	r3, r0
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	d909      	bls.n	8002ea2 <UART_SetConfig+0x45a>
 8002e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	025b      	lsls	r3, r3, #9
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d204      	bcs.n	8002ea2 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	e005      	b.n	8002eae <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea2:	231a      	movs	r3, #26
 8002ea4:	2218      	movs	r2, #24
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	19db      	adds	r3, r3, r7
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002eba:	231a      	movs	r3, #26
 8002ebc:	2218      	movs	r2, #24
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	19db      	adds	r3, r3, r7
 8002ec2:	781b      	ldrb	r3, [r3, #0]
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b00e      	add	sp, #56	; 0x38
 8002eca:	bdb0      	pop	{r4, r5, r7, pc}
 8002ecc:	0800465c 	.word	0x0800465c
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	003d0900 	.word	0x003d0900
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <UART_AdvFeatureConfig+0x144>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a43      	ldr	r2, [pc, #268]	; (8003024 <UART_AdvFeatureConfig+0x148>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a3b      	ldr	r2, [pc, #236]	; (8003028 <UART_AdvFeatureConfig+0x14c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2208      	movs	r2, #8
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a34      	ldr	r2, [pc, #208]	; (800302c <UART_AdvFeatureConfig+0x150>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2210      	movs	r2, #16
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <UART_AdvFeatureConfig+0x154>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2220      	movs	r2, #32
 8002f94:	4013      	ands	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a25      	ldr	r2, [pc, #148]	; (8003034 <UART_AdvFeatureConfig+0x158>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <UART_AdvFeatureConfig+0x15c>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	035b      	lsls	r3, r3, #13
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d10b      	bne.n	8002ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <UART_AdvFeatureConfig+0x160>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <UART_AdvFeatureConfig+0x164>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fffdffff 	.word	0xfffdffff
 8003024:	fffeffff 	.word	0xfffeffff
 8003028:	fffbffff 	.word	0xfffbffff
 800302c:	ffff7fff 	.word	0xffff7fff
 8003030:	ffffefff 	.word	0xffffefff
 8003034:	ffffdfff 	.word	0xffffdfff
 8003038:	ffefffff 	.word	0xffefffff
 800303c:	ff9fffff 	.word	0xff9fffff
 8003040:	fff7ffff 	.word	0xfff7ffff

08003044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af02      	add	r7, sp, #8
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	2100      	movs	r1, #0
 8003052:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003054:	f7fd fd30 	bl	8000ab8 <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2208      	movs	r2, #8
 8003064:	4013      	ands	r3, r2
 8003066:	2b08      	cmp	r3, #8
 8003068:	d10c      	bne.n	8003084 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	0391      	lsls	r1, r2, #14
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <UART_CheckIdleState+0x8c>)
 8003074:	9200      	str	r2, [sp, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	f000 f82c 	bl	80030d4 <UART_WaitOnFlagUntilTimeout>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d001      	beq.n	8003084 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e021      	b.n	80030c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2204      	movs	r2, #4
 800308c:	4013      	ands	r3, r2
 800308e:	2b04      	cmp	r3, #4
 8003090:	d10c      	bne.n	80030ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	03d1      	lsls	r1, r2, #15
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <UART_CheckIdleState+0x8c>)
 800309c:	9200      	str	r2, [sp, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	f000 f818 	bl	80030d4 <UART_WaitOnFlagUntilTimeout>
 80030a4:	1e03      	subs	r3, r0, #0
 80030a6:	d001      	beq.n	80030ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e00d      	b.n	80030c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2274      	movs	r2, #116	; 0x74
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	01ffffff 	.word	0x01ffffff

080030d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b094      	sub	sp, #80	; 0x50
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e4:	e0a3      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e8:	3301      	adds	r3, #1
 80030ea:	d100      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80030ec:	e09f      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fd fce3 	bl	8000ab8 <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <UART_WaitOnFlagUntilTimeout+0x30>
 80030fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003100:	2b00      	cmp	r3, #0
 8003102:	d13d      	bne.n	8003180 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003104:	f3ef 8310 	mrs	r3, PRIMASK
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
 800310e:	2301      	movs	r3, #1
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	494c      	ldr	r1, [pc, #304]	; (8003258 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	f383 8810 	msr	PRIMASK, r3
}
 8003134:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003136:	f3ef 8310 	mrs	r3, PRIMASK
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
 8003140:	2301      	movs	r3, #1
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	f383 8810 	msr	PRIMASK, r3
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2101      	movs	r1, #1
 8003158:	438a      	bics	r2, r1
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	f383 8810 	msr	PRIMASK, r3
}
 8003166:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2274      	movs	r2, #116	; 0x74
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e067      	b.n	8003250 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	d050      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	401a      	ands	r2, r3
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	429a      	cmp	r2, r3
 800319e:	d146      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	613b      	str	r3, [r7, #16]
  return(result);
 80031b0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b4:	2301      	movs	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4923      	ldr	r1, [pc, #140]	; (8003258 <UART_WaitOnFlagUntilTimeout+0x184>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80031e2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e6:	2301      	movs	r3, #1
 80031e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f383 8810 	msr	PRIMASK, r3
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	438a      	bics	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	2120      	movs	r1, #32
 8003220:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2274      	movs	r2, #116	; 0x74
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e010      	b.n	8003250 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	425a      	negs	r2, r3
 800323e:	4153      	adcs	r3, r2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	001a      	movs	r2, r3
 8003244:	1dfb      	adds	r3, r7, #7
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d100      	bne.n	800324e <UART_WaitOnFlagUntilTimeout+0x17a>
 800324c:	e74b      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b014      	add	sp, #80	; 0x50
 8003256:	bd80      	pop	{r7, pc}
 8003258:	fffffe5f 	.word	0xfffffe5f

0800325c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	; 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003264:	f3ef 8310 	mrs	r3, PRIMASK
 8003268:	617b      	str	r3, [r7, #20]
  return(result);
 800326a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f383 8810 	msr	PRIMASK, r3
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4925      	ldr	r1, [pc, #148]	; (800331c <UART_EndRxTransfer+0xc0>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003296:	f3ef 8310 	mrs	r3, PRIMASK
 800329a:	623b      	str	r3, [r7, #32]
  return(result);
 800329c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
 80032a0:	2301      	movs	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2101      	movs	r1, #1
 80032b8:	438a      	bics	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	f383 8810 	msr	PRIMASK, r3
}
 80032c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d118      	bne.n	8003302 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d0:	f3ef 8310 	mrs	r3, PRIMASK
 80032d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80032d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032da:	2301      	movs	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f383 8810 	msr	PRIMASK, r3
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2110      	movs	r1, #16
 80032f2:	438a      	bics	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b00e      	add	sp, #56	; 0x38
 800331a:	bd80      	pop	{r7, pc}
 800331c:	fffffedf 	.word	0xfffffedf

08003320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	225a      	movs	r2, #90	; 0x5a
 8003332:	2100      	movs	r1, #0
 8003334:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2252      	movs	r2, #82	; 0x52
 800333a:	2100      	movs	r1, #0
 800333c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fb6d 	bl	8002a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}

0800334e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	60bb      	str	r3, [r7, #8]
  return(result);
 800335c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	2301      	movs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	438a      	bics	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fb3a 	bl	8002a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b006      	add	sp, #24
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	0002      	movs	r2, r0
 80033bc:	1dbb      	adds	r3, r7, #6
 80033be:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033c4:	1dbb      	adds	r3, r7, #6
 80033c6:	2200      	movs	r2, #0
 80033c8:	5e9b      	ldrsh	r3, [r3, r2]
 80033ca:	2b84      	cmp	r3, #132	; 0x84
 80033cc:	d006      	beq.n	80033dc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80033ce:	1dbb      	adds	r3, r7, #6
 80033d0:	2200      	movs	r2, #0
 80033d2:	5e9a      	ldrsh	r2, [r3, r2]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	18d3      	adds	r3, r2, r3
 80033d8:	3303      	adds	r3, #3
 80033da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033dc:	68fb      	ldr	r3, [r7, #12]
}
 80033de:	0018      	movs	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b004      	add	sp, #16
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033ea:	f000 faab 	bl	8003944 <vTaskStartScheduler>
  
  return osOK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f8:	b089      	sub	sp, #36	; 0x24
 80033fa:	af04      	add	r7, sp, #16
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <osThreadCreate+0x54>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685c      	ldr	r4, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681d      	ldr	r5, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691e      	ldr	r6, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2208      	movs	r2, #8
 8003420:	5e9b      	ldrsh	r3, [r3, r2]
 8003422:	0018      	movs	r0, r3
 8003424:	f7ff ffc6 	bl	80033b4 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003430:	6839      	ldr	r1, [r7, #0]
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	9201      	str	r2, [sp, #4]
 8003436:	9000      	str	r0, [sp, #0]
 8003438:	000b      	movs	r3, r1
 800343a:	0032      	movs	r2, r6
 800343c:	0029      	movs	r1, r5
 800343e:	0020      	movs	r0, r4
 8003440:	f000 f8e3 	bl	800360a <xTaskCreateStatic>
 8003444:	0003      	movs	r3, r0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e01d      	b.n	8003486 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685c      	ldr	r4, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003456:	b29e      	uxth	r6, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2208      	movs	r2, #8
 800345c:	5e9b      	ldrsh	r3, [r3, r2]
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff ffa8 	bl	80033b4 <makeFreeRtosPriority>
 8003464:	0001      	movs	r1, r0
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	230c      	movs	r3, #12
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	9100      	str	r1, [sp, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	0032      	movs	r2, r6
 8003474:	0029      	movs	r1, r5
 8003476:	0020      	movs	r0, r4
 8003478:	f000 f90b 	bl	8003692 <xTaskCreate>
 800347c:	0003      	movs	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b005      	add	sp, #20
 800348e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003490 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <osDelay+0x16>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	e000      	b.n	80034a8 <osDelay+0x18>
 80034a6:	2301      	movs	r3, #1
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fa25 	bl	80038f8 <vTaskDelay>
  
  return osOK;
 80034ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3308      	adds	r3, #8
 80034c4:	001a      	movs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	4252      	negs	r2, r2
 80034d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3308      	adds	r3, #8
 80034d6:	001a      	movs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3308      	adds	r3, #8
 80034e0:	001a      	movs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b002      	add	sp, #8
 8003508:	bd80      	pop	{r7, pc}

0800350a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bd80      	pop	{r7, pc}

0800354e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3301      	adds	r3, #1
 8003562:	d103      	bne.n	800356c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e00c      	b.n	8003586 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3308      	adds	r3, #8
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e002      	b.n	800357a <vListInsert+0x2c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d2f6      	bcs.n	8003574 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}

080035ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6852      	ldr	r2, [r2, #4]
 80035da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d103      	bne.n	80035ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b004      	add	sp, #16
 8003608:	bd80      	pop	{r7, pc}

0800360a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800360a:	b590      	push	{r4, r7, lr}
 800360c:	b08d      	sub	sp, #52	; 0x34
 800360e:	af04      	add	r7, sp, #16
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <xTaskCreateStatic+0x18>
 800361e:	b672      	cpsid	i
 8003620:	e7fe      	b.n	8003620 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <xTaskCreateStatic+0x22>
 8003628:	b672      	cpsid	i
 800362a:	e7fe      	b.n	800362a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800362c:	2354      	movs	r3, #84	; 0x54
 800362e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b54      	cmp	r3, #84	; 0x54
 8003634:	d001      	beq.n	800363a <xTaskCreateStatic+0x30>
 8003636:	b672      	cpsid	i
 8003638:	e7fe      	b.n	8003638 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800363a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d020      	beq.n	8003684 <xTaskCreateStatic+0x7a>
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01d      	beq.n	8003684 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2251      	movs	r2, #81	; 0x51
 8003656:	2102      	movs	r1, #2
 8003658:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800365a:	683c      	ldr	r4, [r7, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	2300      	movs	r3, #0
 8003664:	9303      	str	r3, [sp, #12]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	9302      	str	r3, [sp, #8]
 800366a:	2318      	movs	r3, #24
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	0023      	movs	r3, r4
 8003676:	f000 f859 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 f8d7 	bl	8003830 <prvAddNewTaskToReadyList>
 8003682:	e001      	b.n	8003688 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003688:	69bb      	ldr	r3, [r7, #24]
	}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b009      	add	sp, #36	; 0x24
 8003690:	bd90      	pop	{r4, r7, pc}

08003692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003692:	b590      	push	{r4, r7, lr}
 8003694:	b08d      	sub	sp, #52	; 0x34
 8003696:	af04      	add	r7, sp, #16
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	1dbb      	adds	r3, r7, #6
 80036a0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f000 fd81 	bl	80041b0 <pvPortMalloc>
 80036ae:	0003      	movs	r3, r0
 80036b0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036b8:	2054      	movs	r0, #84	; 0x54
 80036ba:	f000 fd79 	bl	80041b0 <pvPortMalloc>
 80036be:	0003      	movs	r3, r0
 80036c0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
 80036ce:	e006      	b.n	80036de <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fe12 	bl	80042fc <vPortFree>
 80036d8:	e001      	b.n	80036de <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01a      	beq.n	800371a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2251      	movs	r2, #81	; 0x51
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	683c      	ldr	r4, [r7, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	0023      	movs	r3, r4
 8003708:	f000 f810 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 f88e 	bl	8003830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003714:	2301      	movs	r3, #1
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e002      	b.n	8003720 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800371a:	2301      	movs	r3, #1
 800371c:	425b      	negs	r3, r3
 800371e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003720:	69bb      	ldr	r3, [r7, #24]
	}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b009      	add	sp, #36	; 0x24
 8003728:	bd90      	pop	{r4, r7, pc}
	...

0800372c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	493a      	ldr	r1, [pc, #232]	; (800382c <prvInitialiseNewTask+0x100>)
 8003742:	468c      	mov	ip, r1
 8003744:	4463      	add	r3, ip
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2207      	movs	r2, #7
 8003750:	4393      	bics	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2207      	movs	r2, #7
 8003758:	4013      	ands	r3, r2
 800375a:	d001      	beq.n	8003760 <prvInitialiseNewTask+0x34>
 800375c:	b672      	cpsid	i
 800375e:	e7fe      	b.n	800375e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e013      	b.n	8003794 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	7818      	ldrb	r0, [r3, #0]
 8003774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003776:	2134      	movs	r1, #52	; 0x34
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	185b      	adds	r3, r3, r1
 800377e:	1c02      	adds	r2, r0, #0
 8003780:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d006      	beq.n	800379c <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b0f      	cmp	r3, #15
 8003798:	d9e8      	bls.n	800376c <prvInitialiseNewTask+0x40>
 800379a:	e000      	b.n	800379e <prvInitialiseNewTask+0x72>
			{
				break;
 800379c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	2243      	movs	r2, #67	; 0x43
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	e003      	b.n	80037b0 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2234      	movs	r2, #52	; 0x34
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d901      	bls.n	80037ba <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037b6:	2306      	movs	r3, #6
 80037b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	6a3a      	ldr	r2, [r7, #32]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	2200      	movs	r2, #0
 80037ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	3304      	adds	r3, #4
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff fe8f 	bl	80034f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	3318      	adds	r3, #24
 80037da:	0018      	movs	r0, r3
 80037dc:	f7ff fe8a 	bl	80034f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2207      	movs	r2, #7
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2200      	movs	r2, #0
 80037fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2250      	movs	r2, #80	; 0x50
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fb9e 	bl	8003f4c <pxPortInitialiseStack>
 8003810:	0002      	movs	r2, r0
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b006      	add	sp, #24
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	3fffffff 	.word	0x3fffffff

08003830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003838:	f000 fc22 	bl	8004080 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <prvAddNewTaskToReadyList+0xb0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <prvAddNewTaskToReadyList+0xb0>)
 8003844:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <prvAddNewTaskToReadyList+0xb4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <prvAddNewTaskToReadyList+0xb4>)
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <prvAddNewTaskToReadyList+0xb0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d110      	bne.n	800387e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800385c:	f000 fa6a 	bl	8003d34 <prvInitialiseTaskLists>
 8003860:	e00d      	b.n	800387e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <prvAddNewTaskToReadyList+0xb8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <prvAddNewTaskToReadyList+0xb4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	429a      	cmp	r2, r3
 8003876:	d802      	bhi.n	800387e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <prvAddNewTaskToReadyList+0xb4>)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <prvAddNewTaskToReadyList+0xbc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <prvAddNewTaskToReadyList+0xbc>)
 8003886:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <prvAddNewTaskToReadyList+0xc0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d903      	bls.n	800389c <prvAddNewTaskToReadyList+0x6c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <prvAddNewTaskToReadyList+0xc0>)
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	0013      	movs	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <prvAddNewTaskToReadyList+0xc4>)
 80038aa:	189a      	adds	r2, r3, r2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	0019      	movs	r1, r3
 80038b2:	0010      	movs	r0, r2
 80038b4:	f7ff fe29 	bl	800350a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038b8:	f000 fbf4 	bl	80040a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvAddNewTaskToReadyList+0xb8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <prvAddNewTaskToReadyList+0xb4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d201      	bcs.n	80038d6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038d2:	f000 fbc5 	bl	8004060 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	20000454 	.word	0x20000454
 80038e4:	20000354 	.word	0x20000354
 80038e8:	20000460 	.word	0x20000460
 80038ec:	20000470 	.word	0x20000470
 80038f0:	2000045c 	.word	0x2000045c
 80038f4:	20000358 	.word	0x20000358

080038f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <vTaskDelay+0x48>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <vTaskDelay+0x1e>
 8003912:	b672      	cpsid	i
 8003914:	e7fe      	b.n	8003914 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003916:	f000 f863 	bl	80039e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2100      	movs	r1, #0
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fac0 	bl	8003ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003924:	f000 f868 	bl	80039f8 <xTaskResumeAll>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003932:	f000 fb95 	bl	8004060 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000047c 	.word	0x2000047c

08003944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003952:	003a      	movs	r2, r7
 8003954:	1d39      	adds	r1, r7, #4
 8003956:	2308      	movs	r3, #8
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	0018      	movs	r0, r3
 800395c:	f7fc fda4 	bl	80004a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003960:	683c      	ldr	r4, [r7, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4918      	ldr	r1, [pc, #96]	; (80039c8 <vTaskStartScheduler+0x84>)
 8003968:	4818      	ldr	r0, [pc, #96]	; (80039cc <vTaskStartScheduler+0x88>)
 800396a:	9202      	str	r2, [sp, #8]
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2300      	movs	r3, #0
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	2300      	movs	r3, #0
 8003974:	0022      	movs	r2, r4
 8003976:	f7ff fe48 	bl	800360a <xTaskCreateStatic>
 800397a:	0002      	movs	r2, r0
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <vTaskStartScheduler+0x8c>)
 800397e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <vTaskStartScheduler+0x8c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003988:	2301      	movs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e001      	b.n	8003992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003998:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <vTaskStartScheduler+0x90>)
 800399c:	2201      	movs	r2, #1
 800399e:	4252      	negs	r2, r2
 80039a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <vTaskStartScheduler+0x94>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <vTaskStartScheduler+0x98>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039ae:	f000 fb33 	bl	8004018 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039b2:	e004      	b.n	80039be <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	d101      	bne.n	80039be <vTaskStartScheduler+0x7a>
 80039ba:	b672      	cpsid	i
 80039bc:	e7fe      	b.n	80039bc <vTaskStartScheduler+0x78>
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b005      	add	sp, #20
 80039c4:	bd90      	pop	{r4, r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	0800460c 	.word	0x0800460c
 80039cc:	08003d15 	.word	0x08003d15
 80039d0:	20000478 	.word	0x20000478
 80039d4:	20000474 	.word	0x20000474
 80039d8:	20000460 	.word	0x20000460
 80039dc:	20000458 	.word	0x20000458

080039e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <vTaskSuspendAll+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <vTaskSuspendAll+0x14>)
 80039ec:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000047c 	.word	0x2000047c

080039f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a06:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <xTaskResumeAll+0xf8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <xTaskResumeAll+0x1a>
 8003a0e:	b672      	cpsid	i
 8003a10:	e7fe      	b.n	8003a10 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a12:	f000 fb35 	bl	8004080 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <xTaskResumeAll+0xf8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <xTaskResumeAll+0xf8>)
 8003a1e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a20:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <xTaskResumeAll+0xf8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d15b      	bne.n	8003ae0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a28:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <xTaskResumeAll+0xfc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d057      	beq.n	8003ae0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a30:	e02f      	b.n	8003a92 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <xTaskResumeAll+0x100>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff fdbb 	bl	80035ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3304      	adds	r3, #4
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7ff fdb6 	bl	80035ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <xTaskResumeAll+0x104>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d903      	bls.n	8003a62 <xTaskResumeAll+0x6a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <xTaskResumeAll+0x104>)
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a66:	0013      	movs	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4a24      	ldr	r2, [pc, #144]	; (8003b00 <xTaskResumeAll+0x108>)
 8003a70:	189a      	adds	r2, r3, r2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3304      	adds	r3, #4
 8003a76:	0019      	movs	r1, r3
 8003a78:	0010      	movs	r0, r2
 8003a7a:	f7ff fd46 	bl	800350a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <xTaskResumeAll+0x10c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <xTaskResumeAll+0x110>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <xTaskResumeAll+0x100>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1cb      	bne.n	8003a32 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aa0:	f000 f9e2 	bl	8003e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <xTaskResumeAll+0x114>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00f      	beq.n	8003ad0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ab0:	f000 f82e 	bl	8003b10 <xTaskIncrementTick>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d002      	beq.n	8003abe <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <xTaskResumeAll+0x110>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f2      	bne.n	8003ab0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <xTaskResumeAll+0x114>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <xTaskResumeAll+0x110>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003adc:	f000 fac0 	bl	8004060 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ae0:	f000 fae0 	bl	80040a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	2000047c 	.word	0x2000047c
 8003af4:	20000454 	.word	0x20000454
 8003af8:	20000414 	.word	0x20000414
 8003afc:	2000045c 	.word	0x2000045c
 8003b00:	20000358 	.word	0x20000358
 8003b04:	20000354 	.word	0x20000354
 8003b08:	20000468 	.word	0x20000468
 8003b0c:	20000464 	.word	0x20000464

08003b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <xTaskIncrementTick+0x134>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d000      	beq.n	8003b24 <xTaskIncrementTick+0x14>
 8003b22:	e07e      	b.n	8003c22 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b24:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <xTaskIncrementTick+0x138>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <xTaskIncrementTick+0x138>)
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d117      	bne.n	8003b68 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b38:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <xTaskIncrementTick+0x13c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <xTaskIncrementTick+0x36>
 8003b42:	b672      	cpsid	i
 8003b44:	e7fe      	b.n	8003b44 <xTaskIncrementTick+0x34>
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <xTaskIncrementTick+0x13c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <xTaskIncrementTick+0x140>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <xTaskIncrementTick+0x13c>)
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <xTaskIncrementTick+0x140>)
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <xTaskIncrementTick+0x144>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <xTaskIncrementTick+0x144>)
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f000 f980 	bl	8003e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <xTaskIncrementTick+0x148>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d349      	bcc.n	8003c06 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <xTaskIncrementTick+0x13c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d104      	bne.n	8003b86 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <xTaskIncrementTick+0x148>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4252      	negs	r2, r2
 8003b82:	601a      	str	r2, [r3, #0]
					break;
 8003b84:	e03f      	b.n	8003c06 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <xTaskIncrementTick+0x13c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d203      	bcs.n	8003ba6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <xTaskIncrementTick+0x148>)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ba4:	e02f      	b.n	8003c06 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff fd05 	bl	80035ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7ff fcfc 	bl	80035ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <xTaskIncrementTick+0x14c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d903      	bls.n	8003bd6 <xTaskIncrementTick+0xc6>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <xTaskIncrementTick+0x14c>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bda:	0013      	movs	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	189b      	adds	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <xTaskIncrementTick+0x150>)
 8003be4:	189a      	adds	r2, r3, r2
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3304      	adds	r3, #4
 8003bea:	0019      	movs	r1, r3
 8003bec:	0010      	movs	r0, r2
 8003bee:	f7ff fc8c 	bl	800350a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3b8      	bcc.n	8003b72 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c04:	e7b5      	b.n	8003b72 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4914      	ldr	r1, [pc, #80]	; (8003c60 <xTaskIncrementTick+0x150>)
 8003c0e:	0013      	movs	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	585b      	ldr	r3, [r3, r1]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d907      	bls.n	8003c2c <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e004      	b.n	8003c2c <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <xTaskIncrementTick+0x158>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <xTaskIncrementTick+0x158>)
 8003c2a:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskIncrementTick+0x15c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c38:	697b      	ldr	r3, [r7, #20]
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b006      	add	sp, #24
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	2000047c 	.word	0x2000047c
 8003c48:	20000458 	.word	0x20000458
 8003c4c:	2000040c 	.word	0x2000040c
 8003c50:	20000410 	.word	0x20000410
 8003c54:	2000046c 	.word	0x2000046c
 8003c58:	20000474 	.word	0x20000474
 8003c5c:	2000045c 	.word	0x2000045c
 8003c60:	20000358 	.word	0x20000358
 8003c64:	20000354 	.word	0x20000354
 8003c68:	20000464 	.word	0x20000464
 8003c6c:	20000468 	.word	0x20000468

08003c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <vTaskSwitchContext+0x90>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c7e:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <vTaskSwitchContext+0x94>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c84:	e037      	b.n	8003cf6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <vTaskSwitchContext+0x94>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <vTaskSwitchContext+0x98>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	e007      	b.n	8003ca4 <vTaskSwitchContext+0x34>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <vTaskSwitchContext+0x2e>
 8003c9a:	b672      	cpsid	i
 8003c9c:	e7fe      	b.n	8003c9c <vTaskSwitchContext+0x2c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	4919      	ldr	r1, [pc, #100]	; (8003d0c <vTaskSwitchContext+0x9c>)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	0013      	movs	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	585b      	ldr	r3, [r3, r1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <vTaskSwitchContext+0x24>
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	0013      	movs	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	189b      	adds	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <vTaskSwitchContext+0x9c>)
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d104      	bne.n	8003ce6 <vTaskSwitchContext+0x76>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <vTaskSwitchContext+0xa0>)
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <vTaskSwitchContext+0x98>)
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	2000047c 	.word	0x2000047c
 8003d04:	20000468 	.word	0x20000468
 8003d08:	2000045c 	.word	0x2000045c
 8003d0c:	20000358 	.word	0x20000358
 8003d10:	20000354 	.word	0x20000354

08003d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d1c:	f000 f84e 	bl	8003dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <prvIdleTask+0x1c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d9f9      	bls.n	8003d1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d28:	f000 f99a 	bl	8004060 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003d2c:	e7f6      	b.n	8003d1c <prvIdleTask+0x8>
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000358 	.word	0x20000358

08003d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	e00c      	b.n	8003d5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	0013      	movs	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <prvInitialiseTaskLists+0x68>)
 8003d4c:	189b      	adds	r3, r3, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff fbb2 	bl	80034b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d9ef      	bls.n	8003d40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <prvInitialiseTaskLists+0x6c>)
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7ff fba8 	bl	80034b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <prvInitialiseTaskLists+0x70>)
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff fba4 	bl	80034b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <prvInitialiseTaskLists+0x74>)
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7ff fba0 	bl	80034b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <prvInitialiseTaskLists+0x78>)
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fb9c 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <prvInitialiseTaskLists+0x7c>)
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff fb98 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <prvInitialiseTaskLists+0x80>)
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <prvInitialiseTaskLists+0x6c>)
 8003d8c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <prvInitialiseTaskLists+0x84>)
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <prvInitialiseTaskLists+0x70>)
 8003d92:	601a      	str	r2, [r3, #0]
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000358 	.word	0x20000358
 8003da0:	200003e4 	.word	0x200003e4
 8003da4:	200003f8 	.word	0x200003f8
 8003da8:	20000414 	.word	0x20000414
 8003dac:	20000428 	.word	0x20000428
 8003db0:	20000440 	.word	0x20000440
 8003db4:	2000040c 	.word	0x2000040c
 8003db8:	20000410 	.word	0x20000410

08003dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc2:	e01a      	b.n	8003dfa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003dc4:	f000 f95c 	bl	8004080 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <prvCheckTasksWaitingTermination+0x50>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fbf0 	bl	80035ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <prvCheckTasksWaitingTermination+0x54>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvCheckTasksWaitingTermination+0x54>)
 8003de2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	1e5a      	subs	r2, r3, #1
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003dec:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003dee:	f000 f959 	bl	80040a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f80f 	bl	8003e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e0      	bne.n	8003dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000428 	.word	0x20000428
 8003e10:	20000454 	.word	0x20000454
 8003e14:	2000043c 	.word	0x2000043c

08003e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2251      	movs	r2, #81	; 0x51
 8003e24:	5c9b      	ldrb	r3, [r3, r2]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 fa64 	bl	80042fc <vPortFree>
				vPortFree( pxTCB );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 fa60 	bl	80042fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e3c:	e010      	b.n	8003e60 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2251      	movs	r2, #81	; 0x51
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d104      	bne.n	8003e52 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 fa56 	bl	80042fc <vPortFree>
	}
 8003e50:	e006      	b.n	8003e60 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2251      	movs	r2, #81	; 0x51
 8003e56:	5c9b      	ldrb	r3, [r3, r2]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d001      	beq.n	8003e60 <prvDeleteTCB+0x48>
 8003e5c:	b672      	cpsid	i
 8003e5e:	e7fe      	b.n	8003e5e <prvDeleteTCB+0x46>
	}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <prvResetNextTaskUnblockTime+0x34>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e78:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <prvResetNextTaskUnblockTime+0x38>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4252      	negs	r2, r2
 8003e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e80:	e008      	b.n	8003e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <prvResetNextTaskUnblockTime+0x34>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <prvResetNextTaskUnblockTime+0x38>)
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	2000040c 	.word	0x2000040c
 8003ea0:	20000474 	.word	0x20000474

08003ea4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <prvAddCurrentTaskToDelayedList+0x90>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff fb7d 	bl	80035ba <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	d10b      	bne.n	8003ede <prvAddCurrentTaskToDelayedList+0x3a>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1d1a      	adds	r2, r3, #4
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff fb17 	bl	800350a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003edc:	e026      	b.n	8003f2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	18d3      	adds	r3, r2, r3
 8003ee4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ee6:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d209      	bcs.n	8003f0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3304      	adds	r3, #4
 8003f00:	0019      	movs	r1, r3
 8003f02:	0010      	movs	r0, r2
 8003f04:	f7ff fb23 	bl	800354e <vListInsert>
}
 8003f08:	e010      	b.n	8003f2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3304      	adds	r3, #4
 8003f14:	0019      	movs	r1, r3
 8003f16:	0010      	movs	r0, r2
 8003f18:	f7ff fb19 	bl	800354e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d202      	bcs.n	8003f2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	601a      	str	r2, [r3, #0]
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000458 	.word	0x20000458
 8003f38:	20000354 	.word	0x20000354
 8003f3c:	20000440 	.word	0x20000440
 8003f40:	20000410 	.word	0x20000410
 8003f44:	2000040c 	.word	0x2000040c
 8003f48:	20000474 	.word	0x20000474

08003f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0452      	lsls	r2, r2, #17
 8003f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3b04      	subs	r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3b04      	subs	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <pxPortInitialiseStack+0x50>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3b14      	subs	r3, #20
 8003f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3b20      	subs	r3, #32
 8003f8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f90:	68fb      	ldr	r3, [r7, #12]
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b004      	add	sp, #16
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	08003fa1 	.word	0x08003fa1

08003fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <prvTaskExitError+0x2c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <prvTaskExitError+0x16>
 8003fb2:	b672      	cpsid	i
 8003fb4:	e7fe      	b.n	8003fb4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003fb6:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0fc      	beq.n	8003fba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	0000      	movs	r0, r0
 8003fdc:	0000      	movs	r0, r0
	...

08003fe0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003fe0:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <pxCurrentTCBConst2>)
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	3020      	adds	r0, #32
 8003fe8:	f380 8809 	msr	PSP, r0
 8003fec:	2002      	movs	r0, #2
 8003fee:	f380 8814 	msr	CONTROL, r0
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003ff8:	46ae      	mov	lr, r5
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	bc04      	pop	{r2}
 8003ffe:	b662      	cpsie	i
 8004000:	4718      	bx	r3
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46c0      	nop			; (mov r8, r8)

08004010 <pxCurrentTCBConst2>:
 8004010:	20000354 	.word	0x20000354
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46c0      	nop			; (mov r8, r8)

08004018 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <xPortStartScheduler+0x40>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <xPortStartScheduler+0x40>)
 8004022:	21ff      	movs	r1, #255	; 0xff
 8004024:	0409      	lsls	r1, r1, #16
 8004026:	430a      	orrs	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <xPortStartScheduler+0x40>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <xPortStartScheduler+0x40>)
 8004030:	21ff      	movs	r1, #255	; 0xff
 8004032:	0609      	lsls	r1, r1, #24
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004038:	f000 f898 	bl	800416c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <xPortStartScheduler+0x44>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004042:	f7ff ffcd 	bl	8003fe0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004046:	f7ff fe13 	bl	8003c70 <vTaskSwitchContext>
	prvTaskExitError();
 800404a:	f7ff ffa9 	bl	8003fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	e000ed20 	.word	0xe000ed20
 800405c:	2000000c 	.word	0x2000000c

08004060 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <vPortYield+0x1c>)
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	0552      	lsls	r2, r2, #21
 800406a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800406c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004070:	f3bf 8f6f 	isb	sy
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004084:	b672      	cpsid	i
    uxCriticalNesting++;
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <vPortEnterCritical+0x20>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <vPortEnterCritical+0x20>)
 800408e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004090:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004094:	f3bf 8f6f 	isb	sy
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	2000000c 	.word	0x2000000c

080040a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <vPortExitCritical+0x2c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <vPortExitCritical+0x10>
 80040b0:	b672      	cpsid	i
 80040b2:	e7fe      	b.n	80040b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <vPortExitCritical+0x2c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <vPortExitCritical+0x2c>)
 80040bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vPortExitCritical+0x2c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d100      	bne.n	80040c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80040c6:	b662      	cpsie	i
    }
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	2000000c 	.word	0x2000000c

080040d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80040d4:	f3ef 8010 	mrs	r0, PRIMASK
 80040d8:	b672      	cpsid	i
 80040da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	0018      	movs	r0, r3

080040e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80040e0:	f380 8810 	msr	PRIMASK, r0
 80040e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80040e6:	46c0      	nop			; (mov r8, r8)
	...

080040f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040f0:	f3ef 8009 	mrs	r0, PSP
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <pxCurrentTCBConst>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	3820      	subs	r0, #32
 80040fa:	6010      	str	r0, [r2, #0]
 80040fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80040fe:	4644      	mov	r4, r8
 8004100:	464d      	mov	r5, r9
 8004102:	4656      	mov	r6, sl
 8004104:	465f      	mov	r7, fp
 8004106:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004108:	b508      	push	{r3, lr}
 800410a:	b672      	cpsid	i
 800410c:	f7ff fdb0 	bl	8003c70 <vTaskSwitchContext>
 8004110:	b662      	cpsie	i
 8004112:	bc0c      	pop	{r2, r3}
 8004114:	6811      	ldr	r1, [r2, #0]
 8004116:	6808      	ldr	r0, [r1, #0]
 8004118:	3010      	adds	r0, #16
 800411a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800411c:	46a0      	mov	r8, r4
 800411e:	46a9      	mov	r9, r5
 8004120:	46b2      	mov	sl, r6
 8004122:	46bb      	mov	fp, r7
 8004124:	f380 8809 	msr	PSP, r0
 8004128:	3820      	subs	r0, #32
 800412a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800412c:	4718      	bx	r3
 800412e:	46c0      	nop			; (mov r8, r8)

08004130 <pxCurrentTCBConst>:
 8004130:	20000354 	.word	0x20000354
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46c0      	nop			; (mov r8, r8)

08004138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800413e:	f7ff ffc9 	bl	80040d4 <ulSetInterruptMaskFromISR>
 8004142:	0003      	movs	r3, r0
 8004144:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004146:	f7ff fce3 	bl	8003b10 <xTaskIncrementTick>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d003      	beq.n	8004156 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SysTick_Handler+0x30>)
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	0552      	lsls	r2, r2, #21
 8004154:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff ffc1 	bl	80040e0 <vClearInterruptMaskFromISR>
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b002      	add	sp, #8
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <prvSetupTimerInterrupt+0x34>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <prvSetupTimerInterrupt+0x38>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <prvSetupTimerInterrupt+0x3c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	22fa      	movs	r2, #250	; 0xfa
 8004182:	0091      	lsls	r1, r2, #2
 8004184:	0018      	movs	r0, r3
 8004186:	f7fb ffbf 	bl	8000108 <__udivsi3>
 800418a:	0003      	movs	r3, r0
 800418c:	001a      	movs	r2, r3
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <prvSetupTimerInterrupt+0x40>)
 8004190:	3a01      	subs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004194:	4b02      	ldr	r3, [pc, #8]	; (80041a0 <prvSetupTimerInterrupt+0x34>)
 8004196:	2207      	movs	r2, #7
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	e000e010 	.word	0xe000e010
 80041a4:	e000e018 	.word	0xe000e018
 80041a8:	20000000 	.word	0x20000000
 80041ac:	e000e014 	.word	0xe000e014

080041b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80041bc:	f7ff fc10 	bl	80039e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041c0:	4b49      	ldr	r3, [pc, #292]	; (80042e8 <pvPortMalloc+0x138>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041c8:	f000 f8e0 	bl	800438c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041cc:	4b47      	ldr	r3, [pc, #284]	; (80042ec <pvPortMalloc+0x13c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4013      	ands	r3, r2
 80041d4:	d000      	beq.n	80041d8 <pvPortMalloc+0x28>
 80041d6:	e079      	b.n	80042cc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80041de:	2208      	movs	r2, #8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2207      	movs	r2, #7
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00a      	beq.n	8004204 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2207      	movs	r2, #7
 80041f2:	4393      	bics	r3, r2
 80041f4:	3308      	adds	r3, #8
 80041f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2207      	movs	r2, #7
 80041fc:	4013      	ands	r3, r2
 80041fe:	d001      	beq.n	8004204 <pvPortMalloc+0x54>
 8004200:	b672      	cpsid	i
 8004202:	e7fe      	b.n	8004202 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d060      	beq.n	80042cc <pvPortMalloc+0x11c>
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <pvPortMalloc+0x140>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d85b      	bhi.n	80042cc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004214:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <pvPortMalloc+0x144>)
 8004216:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004218:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <pvPortMalloc+0x144>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800421e:	e004      	b.n	800422a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <pvPortMalloc+0x8c>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f1      	bne.n	8004220 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800423c:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <pvPortMalloc+0x138>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	429a      	cmp	r2, r3
 8004244:	d042      	beq.n	80042cc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2208      	movs	r2, #8
 800424c:	189b      	adds	r3, r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1ad2      	subs	r2, r2, r3
 8004260:	2308      	movs	r3, #8
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	429a      	cmp	r2, r3
 8004266:	d916      	bls.n	8004296 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2207      	movs	r2, #7
 8004274:	4013      	ands	r3, r2
 8004276:	d001      	beq.n	800427c <pvPortMalloc+0xcc>
 8004278:	b672      	cpsid	i
 800427a:	e7fe      	b.n	800427a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 f8db 	bl	800444c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004296:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <pvPortMalloc+0x140>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	1ad2      	subs	r2, r2, r3
 80042a0:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <pvPortMalloc+0x140>)
 80042a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <pvPortMalloc+0x140>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <pvPortMalloc+0x148>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d203      	bcs.n	80042b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <pvPortMalloc+0x140>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <pvPortMalloc+0x148>)
 80042b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <pvPortMalloc+0x13c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042cc:	f7ff fb94 	bl	80039f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2207      	movs	r2, #7
 80042d4:	4013      	ands	r3, r2
 80042d6:	d001      	beq.n	80042dc <pvPortMalloc+0x12c>
 80042d8:	b672      	cpsid	i
 80042da:	e7fe      	b.n	80042da <pvPortMalloc+0x12a>
	return pvReturn;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b006      	add	sp, #24
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20001088 	.word	0x20001088
 80042ec:	20001094 	.word	0x20001094
 80042f0:	2000108c 	.word	0x2000108c
 80042f4:	20001080 	.word	0x20001080
 80042f8:	20001090 	.word	0x20001090

080042fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d035      	beq.n	800437a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800430e:	2308      	movs	r3, #8
 8004310:	425b      	negs	r3, r3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	18d3      	adds	r3, r2, r3
 8004316:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <vPortFree+0x88>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4013      	ands	r3, r2
 8004326:	d101      	bne.n	800432c <vPortFree+0x30>
 8004328:	b672      	cpsid	i
 800432a:	e7fe      	b.n	800432a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <vPortFree+0x3c>
 8004334:	b672      	cpsid	i
 8004336:	e7fe      	b.n	8004336 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <vPortFree+0x88>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4013      	ands	r3, r2
 8004342:	d01a      	beq.n	800437a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <vPortFree+0x88>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	43db      	mvns	r3, r3
 8004356:	401a      	ands	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800435c:	f7ff fb40 	bl	80039e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <vPortFree+0x8c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	18d2      	adds	r2, r2, r3
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <vPortFree+0x8c>)
 800436c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	0018      	movs	r0, r3
 8004372:	f000 f86b 	bl	800444c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004376:	f7ff fb3f 	bl	80039f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	20001094 	.word	0x20001094
 8004388:	2000108c 	.word	0x2000108c

0800438c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004398:	4b26      	ldr	r3, [pc, #152]	; (8004434 <prvHeapInit+0xa8>)
 800439a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2207      	movs	r2, #7
 80043a0:	4013      	ands	r3, r2
 80043a2:	d00c      	beq.n	80043be <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3307      	adds	r3, #7
 80043a8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2207      	movs	r2, #7
 80043ae:	4393      	bics	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad2      	subs	r2, r2, r3
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <prvHeapInit+0xa8>)
 80043ba:	18d3      	adds	r3, r2, r3
 80043bc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <prvHeapInit+0xac>)
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <prvHeapInit+0xac>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	18d3      	adds	r3, r2, r3
 80043d4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043d6:	2208      	movs	r2, #8
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2207      	movs	r2, #7
 80043e2:	4393      	bics	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <prvHeapInit+0xb0>)
 80043ea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <prvHeapInit+0xb0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <prvHeapInit+0xb0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <prvHeapInit+0xb0>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <prvHeapInit+0xb4>)
 8004418:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <prvHeapInit+0xb8>)
 8004420:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <prvHeapInit+0xbc>)
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	0612      	lsls	r2, r2, #24
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	20000480 	.word	0x20000480
 8004438:	20001080 	.word	0x20001080
 800443c:	20001088 	.word	0x20001088
 8004440:	20001090 	.word	0x20001090
 8004444:	2000108c 	.word	0x2000108c
 8004448:	20001094 	.word	0x20001094

0800444c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004454:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <prvInsertBlockIntoFreeList+0xa8>)
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e002      	b.n	8004460 <prvInsertBlockIntoFreeList+0x14>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d8f7      	bhi.n	800445a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d108      	bne.n	800448e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	18d2      	adds	r2, r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	18d2      	adds	r2, r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d118      	bne.n	80044d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <prvInsertBlockIntoFreeList+0xac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d00d      	beq.n	80044ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	18d2      	adds	r2, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e008      	b.n	80044dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <prvInsertBlockIntoFreeList+0xac>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e003      	b.n	80044dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d002      	beq.n	80044ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	20001080 	.word	0x20001080
 80044f8:	20001088 	.word	0x20001088

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	2600      	movs	r6, #0
 8004500:	4d0c      	ldr	r5, [pc, #48]	; (8004534 <__libc_init_array+0x38>)
 8004502:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004504:	1b64      	subs	r4, r4, r5
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	2600      	movs	r6, #0
 800450e:	f000 f821 	bl	8004554 <_init>
 8004512:	4d0a      	ldr	r5, [pc, #40]	; (800453c <__libc_init_array+0x40>)
 8004514:	4c0a      	ldr	r4, [pc, #40]	; (8004540 <__libc_init_array+0x44>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	00b3      	lsls	r3, r6, #2
 8004522:	58eb      	ldr	r3, [r5, r3]
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	00b3      	lsls	r3, r6, #2
 800452c:	58eb      	ldr	r3, [r5, r3]
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	08004688 	.word	0x08004688
 8004538:	08004688 	.word	0x08004688
 800453c:	08004688 	.word	0x08004688
 8004540:	0800468c 	.word	0x0800468c

08004544 <memset>:
 8004544:	0003      	movs	r3, r0
 8004546:	1882      	adds	r2, r0, r2
 8004548:	4293      	cmp	r3, r2
 800454a:	d100      	bne.n	800454e <memset+0xa>
 800454c:	4770      	bx	lr
 800454e:	7019      	strb	r1, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	e7f9      	b.n	8004548 <memset+0x4>

08004554 <_init>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr

08004560 <_fini>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr
